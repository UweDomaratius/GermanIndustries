spriteset(food_processor_spriteset_shed) {
	[10, 10, 64, 87, -31, -56, ANIM | NOCROP, "graphics/industries/food_processor.png"]
}
spriteset(food_processor_spriteset_shed_silo) {
	[80, 10, 64, 87, -31, -56, ANIM | NOCROP, "graphics/industries/food_processor.png"]
}
spriteset(food_processor_spriteset_silo) {
	[150, 10, 64, 87, -31, -56, ANIM | NOCROP, "graphics/industries/food_processor.png"]
}
spriteset(food_processor_spriteset_crates) {
	[220, 10, 64, 87, -31, -56, ANIM | NOCROP, "graphics/industries/food_processor.png"]
}
spritelayout food_processor_spritelayout_1 {
	childsprite {
		sprite: default_spriteset_ground_dirty_concrete;
		always_draw: 1;
	}
	building {
		sprite: food_processor_spriteset_shed(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;
		yoffset: 0;
		zoffset: 0;
		xextent: 16;
		yextent: 16;
		zextent: 32;
		always_draw: 0;
	}
}
spritelayout food_processor_spritelayout_2 {
	childsprite {
		sprite: default_spriteset_ground_dirty_concrete;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: food_processor_spriteset_shed_silo(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;
		yoffset: 0;
		zoffset: 0;
		xextent: 16;
		yextent: 16;
		zextent: 32;
		always_draw: 0;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
    
spritelayout food_processor_spritelayout_3 {
	childsprite {
		sprite: default_spriteset_ground_dirty_concrete;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: food_processor_spriteset_silo(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;
		yoffset: 0;
		zoffset: 0;
		xextent: 16;
		yextent: 16;
		zextent: 32;
		always_draw: 0;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}

spritelayout food_processor_spritelayout_4 {
	childsprite {
		sprite: default_spriteset_ground_dirty_concrete;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: food_processor_spriteset_crates(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;
		yoffset: 0;
		zoffset: 0;
		xextent: 16;
		yextent: 16;
		zextent: 32;
		always_draw: 0;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}

//////////////////////////////////////////////////////////////////////////////
// graphics choice switch chain
//////////////////////////////////////////////////////////////////////////////
switch(FEAT_INDUSTRYTILES, SELF, food_processor_switch_graphics_layout1, relative_pos) {
	relative_coord(0, 0): food_processor_spritelayout_1;
	relative_coord(0, 1): food_processor_spritelayout_1;
	relative_coord(0, 2): food_processor_spritelayout_3;
	relative_coord(1, 0): food_processor_spritelayout_1;
	relative_coord(1, 1): food_processor_spritelayout_1;
	relative_coord(1, 2): food_processor_spritelayout_3;
	relative_coord(2, 0): food_processor_spritelayout_2;
	relative_coord(2, 1): food_processor_spritelayout_2;
	relative_coord(2, 2): food_processor_spritelayout_4;
	relative_coord(3, 0): food_processor_spritelayout_4;
	relative_coord(3, 1): food_processor_spritelayout_4;
	relative_coord(3, 2): food_processor_spritelayout_4;
	return 0;
}
switch(FEAT_INDUSTRYTILES, SELF, food_processor_switch_graphics_layout2, relative_pos) {
	relative_coord(0, 0): food_processor_spritelayout_2;
	relative_coord(0, 1): food_processor_spritelayout_3;
	relative_coord(0, 2): food_processor_spritelayout_1;
	relative_coord(0, 3): food_processor_spritelayout_3;
	relative_coord(1, 0): food_processor_spritelayout_1;
	relative_coord(1, 1): food_processor_spritelayout_4;
	relative_coord(1, 2): food_processor_spritelayout_1;
	relative_coord(1, 3): food_processor_spritelayout_3;
	relative_coord(2, 0): food_processor_spritelayout_2;
	relative_coord(2, 1): food_processor_spritelayout_4;
	relative_coord(2, 2): food_processor_spritelayout_1;
	relative_coord(3, 0): food_processor_spritelayout_2;
	relative_coord(3, 1): food_processor_spritelayout_4;
	relative_coord(3, 2): food_processor_spritelayout_1;
	return 0;
}
switch(FEAT_INDUSTRYTILES, SELF, food_processor_switch_graphics_layout3, relative_pos) {
	relative_coord(0, 0): food_processor_spritelayout_1;
	relative_coord(0, 1): food_processor_spritelayout_1;
	relative_coord(0, 2): food_processor_spritelayout_2;
	relative_coord(0, 3): food_processor_spritelayout_3;
	relative_coord(1, 0): food_processor_spritelayout_1;
	relative_coord(1, 1): food_processor_spritelayout_1;
	relative_coord(1, 2): food_processor_spritelayout_2;
	relative_coord(1, 3): food_processor_spritelayout_3;
	relative_coord(2, 0): food_processor_spritelayout_1;
	relative_coord(2, 1): food_processor_spritelayout_1;
	relative_coord(2, 2): food_processor_spritelayout_4;
	relative_coord(2, 3): food_processor_spritelayout_4;
	return 0;
}
switch(FEAT_INDUSTRYTILES, PARENT, food_processor_switch_graphics_layouts, layout_num) {
    1: food_processor_switch_graphics_layout1;
    2: food_processor_switch_graphics_layout2;
    3: food_processor_switch_graphics_layout3;
    food_processor_switch_graphics_layout1; // default
}

switch(FEAT_INDUSTRYTILES, SELF, food_processor_switch_graphics_construction_state, construction_state) {
    0..2: spritelayout_default_construction_states;
    food_processor_switch_graphics_layouts; // default
}


switch (FEAT_INDUSTRYTILES, SELF, food_processor_switch_graphics,
	[switch_tile_fences(),
	 switch_terrain_sprite(),switch_graphics_init_temp_registers()]) {
    food_processor_switch_graphics_construction_state;
}

//////////////////////////////////////////////////////////////////////////////
// location checks
//////////////////////////////////////////////////////////////////////////////
// This check works as follows: calculate height of the northernmost tile of the industry and add 0, 1 or 2 for flat, slope. steep slope
// Do the same for the current tile and compare the results. If the result is equal, the terrain is effectively flat
// and industry can be placed.
// It just looks weird due to the stacked ternary operators needed here
switch (FEAT_INDUSTRYTILES, SELF, food_processor_switch_tile_location_check2,
			(nearby_tile_height(-relative_x, -relative_y) + 
			(nearby_tile_slope(-relative_x, -relative_y)== SLOPE_FLAT ? 0 : nearby_tile_slope(-relative_x, -relative_y) == bitmask(IS_STEEP_SLOPE) ? 2 : 1)) 
			== 
			(nearby_tile_height(0, 0) + (nearby_tile_slope(0, 0) == SLOPE_FLAT ? 0 : nearby_tile_slope(0, 0) == bitmask(IS_STEEP_SLOPE) ? 2 : 1))
			) {
	1: return CB_RESULT_LOCATION_ALLOW;
	return CB_RESULT_LOCATION_DISALLOW;
}

switch (FEAT_INDUSTRYTILES, SELF, food_processor_switch_tile_location_check,
	is_funded_or_prospected() || (not_next_to_industry() && not_next_to_buildings()))
{
	1: food_processor_switch_tile_location_check2;
	return CB_RESULT_LOCATION_DISALLOW;
}

//////////////////////////////////////////////////////////////////////////////
// industry tile and layout definition
//////////////////////////////////////////////////////////////////////////////
item(FEAT_INDUSTRYTILES, food_processor_tile_1, INDUSTRY_TILE_ID_FOOD_PROCESSOR) {
	property {
		substitute:         0;
		land_shape_flags:   0;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
		animation_triggers: bitmask();
	}
	graphics {
		tile_check: food_processor_switch_tile_location_check;
		food_processor_switch_graphics;
	}
}

tilelayout food_processor_industry_layout_1_tilelayout {
	0, 0: food_processor_tile_1;
	0, 1: food_processor_tile_1;
	0, 2: food_processor_tile_1;
	1, 0: food_processor_tile_1;
	1, 1: food_processor_tile_1;
	1, 2: food_processor_tile_1;
	2, 0: food_processor_tile_1;
	2, 1: food_processor_tile_1;
	2, 2: food_processor_tile_1;
	3, 0: food_processor_tile_1;
	3, 1: food_processor_tile_1;
	3, 2: food_processor_tile_1;
}
tilelayout food_processor_industry_layout_2_tilelayout {
	0, 0: food_processor_tile_1;
	0, 1: food_processor_tile_1;
	0, 2: food_processor_tile_1;
	0, 3: food_processor_tile_1;
	1, 0: food_processor_tile_1;
	1, 1: food_processor_tile_1;
	1, 2: food_processor_tile_1;
	1, 3: food_processor_tile_1;
	2, 0: food_processor_tile_1;
	2, 1: food_processor_tile_1;
	2, 2: food_processor_tile_1;
	3, 0: food_processor_tile_1;
	3, 1: food_processor_tile_1;
	3, 2: food_processor_tile_1;
}
tilelayout food_processor_industry_layout_3_tilelayout {
	0, 0: food_processor_tile_1;
	0, 1: food_processor_tile_1;
	0, 2: food_processor_tile_1;
	0, 3: food_processor_tile_1;
	1, 0: food_processor_tile_1;
	1, 1: food_processor_tile_1;
	1, 2: food_processor_tile_1;
	1, 3: food_processor_tile_1;
	2, 0: food_processor_tile_1;
	2, 1: food_processor_tile_1;
	2, 2: food_processor_tile_1;
	2, 3: food_processor_tile_1;
}

switch(FEAT_INDUSTRIES, SELF, food_processor_switch_location_check_industry_distance,
       [STORE_TEMP(32, TEMP_REGISTER_TOWN_MIN_DISTANCE),
	    STORE_TEMP(64, TEMP_REGISTER_TOWN_MAX_DISTANCE),
	    (distance_from_town() && 
	    (industry_distance(INDUSTRY_ID_FARM) >= 32) && 
		(industry_distance(INDUSTRY_ID_FISHING_GROUNDS) >= 32) && 
	    (industry_distance(INDUSTRY_ID_FOOD_PROCESSOR) >= 16))]) {
	   1: return CB_RESULT_LOCATION_ALLOW;
	   return CB_RESULT_LOCATION_DISALLOW;
}

// TODO: scale food production down to 50%?
produce(food_processor_produce,
	[LVST: LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW0);
	 GRAI: LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW1);
	 FISH: LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW2);],
	[FOOD: LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT);],
	0 // do not run again
)

switch(FEAT_INDUSTRIES, SELF, food_processor_switch_produce_lvst,
	[
		STORE_TEMP(min(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING0),LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT)), TEMP_REGISTER_PRODUCTION_RAW0),
		STORE_TEMP(min(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING1),max(0,LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT)-LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW0))), TEMP_REGISTER_PRODUCTION_RAW1),
		STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT)-LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW0)-LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW1), TEMP_REGISTER_PRODUCTION_RAW2),
	]
)
{
	food_processor_produce;
}

switch(FEAT_INDUSTRIES, SELF, food_processor_switch_produce_grai,
	[
		STORE_TEMP(min(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING1),LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT)), TEMP_REGISTER_PRODUCTION_RAW1),
		STORE_TEMP(min(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING2),max(0,LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT)-LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW1))), TEMP_REGISTER_PRODUCTION_RAW2),
		STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT)-LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW1)-LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW2), TEMP_REGISTER_PRODUCTION_RAW0),
	]
)
{
	food_processor_produce;
}

switch(FEAT_INDUSTRIES, SELF, food_processor_switch_produce_fish,
	[
		STORE_TEMP(min(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING2),LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT)), TEMP_REGISTER_PRODUCTION_RAW2),
		STORE_TEMP(min(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING0),max(0,LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT)-LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW2))), TEMP_REGISTER_PRODUCTION_RAW0),
		STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT)-LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW2)-LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW0), TEMP_REGISTER_PRODUCTION_RAW1),
	]
)
{
	food_processor_produce;
}

// food processor uses 10% of stockpile for production, if stockpile is big enough
// if stockpile is < 90t, 9t are produced per 256ticks
// if stockpile is < 9t, whatever is available is used
// 9 is chosen here because it's divisible by 3 - other industries use 8t/80t instead
switch(FEAT_INDUSTRIES, SELF, food_processor_switch_produce, 
	[STORE_TEMP(incoming_cargo_waiting("LVST"),TEMP_REGISTER_INCOMING_CARGO_WAITING0),
	STORE_TEMP(incoming_cargo_waiting("GRAI"),TEMP_REGISTER_INCOMING_CARGO_WAITING1),
	STORE_TEMP(incoming_cargo_waiting("FISH"),TEMP_REGISTER_INCOMING_CARGO_WAITING2),
	 STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING0)+LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING1)+LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING2), TEMP_REGISTER_INCOMING_CARGO_WAITING_MIN_AMOUNT),
	 STORE_TEMP(((LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING_MIN_AMOUNT) / 10) > 9) ? LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING_MIN_AMOUNT) / 10 : 
	 (LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING_MIN_AMOUNT) > 9 ? 9 : LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING_MIN_AMOUNT)),TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT),
	 
	 // calculate how much of incoming freight to use
	 // the logic basically looks like this
	 // if (lvst_waiting > grain_waiting && lvst_waiting > fish_waiting)
	 //	    lvst_consumption (PRODUCTION_RAW0) = min(lvst_waiting, production_amount)
	 //     grain_consumption (PRODUCTION_RAW1) = min(grain_waiting,production_amount - lvst_consumption)
	 //     fish_consumption (PRODUCTION_RAW2) = production_amount - lvst_consumption - grain_consumption
	 // else if (grain_waiting > lvst_waiting && grain_waiting > fish_waiting)
	 //	    grain_consumption (PRODUCTION_RAW1) = min(grain_waiting, production_amount)
	 //     lvst_consumption (PRODUCTION_RAW0) = min(lvst_waiting, production_amount - grain_consumption)
	 //     fish_consumption (PRODUCTION_RAW2) = production_amount - lvst_consumption - grain_consumption
	 // else
	 //     fish_consumption (PRODUCTION_RAW2) = min(fish_waiting, production_amount)
	 //     lvst_consumption (PRODUCTION_RAW0) = min(lvst_waiting, production_amount - fish_consumption)
	 //     grain_consumption (PRODUCTION_RAW1) = production_amount - fish_consumption - lvst_consumption
	 
	 ((LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING0) > LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING1)) &&
	  (LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING0) > LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING2))) ? 2 : 
	  ((LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING1) > LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING0)) &&
	   (LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING1) > LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING2)) ? 1 : 0)])
{
	2: food_processor_switch_produce_lvst;
	1: food_processor_switch_produce_grai;
	food_processor_switch_produce_fish;
}

// only show stockpile for LVST, GRAI, FISH and nothing else
switch(FEAT_INDUSTRIES, SELF, food_processor_switch_cargo_subtype, getbits(extra_callback_info2, 16, 8)) {
	LVST: switch_cargo_subtype;
	GRAI: switch_cargo_subtype;
	FISH: switch_cargo_subtype;
	return 0x3800 + string(STR_EMPTY);
}

item(FEAT_INDUSTRIES, food_processor, INDUSTRY_ID_FOOD_PROCESSOR) {
	property {
		substitute: 0;
		map_colour: 181;
		life_type: IND_LIFE_TYPE_PROCESSING;
		min_cargo_distr: 1;
		layouts: [food_processor_industry_layout_1_tilelayout,food_processor_industry_layout_2_tilelayout,food_processor_industry_layout_3_tilelayout];
		spec_flags: bitmask(IND_FLAG_LONG_CARGO_TYPE_LISTS);
		conflicting_ind_types: [];
		random_sound_effects: [];
		name: TTD_STR_INDUSTRY_NAME_FOOD_PROCESSING_PLANT;
		prob_map_gen: 5;
		prob_in_game: 3;
		fund_cost_multiplier: 65;
		remove_cost_multiplier: 0;
		remove_cost_multiplier: 0;
		cargo_types: [accept_cargo("LVST"),accept_cargo("GRAI"),accept_cargo("FISH"),produce_cargo("FOOD",0)];
		nearby_station_name: string(STR_STATION, string(STR_TOWN),string(STR_STATION_FOOD_PROCESSOR));
	}
        
	graphics {
		produce_cargo_arrival:    empty_produce; 
		produce_256_ticks:        food_processor_switch_produce;
		monthly_prod_change:      return CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change:       return CB_RESULT_IND_PROD_NO_CHANGE;
		location_check:           food_processor_switch_location_check_industry_distance;
		//extra_text_industry:    food_processor_switch_extra_text;
		cargo_subtype_display:    food_processor_switch_cargo_subtype;
	}
}
    