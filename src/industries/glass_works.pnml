spriteset(glass_works_spriteset_1) {
	[10, 10, 64, 31, -31, 0, ANIM | NOCROP, "graphics/industries/glass_works.png"]
}
spriteset(glass_works_spriteset_1_snow) {
	[10, 10, 64, 31, -31, 0, ANIM | NOCROP, "graphics/industries/glass_works_snow.png"]
}
spriteset(glass_works_spriteset_2) {
	[80, 10, 64, 31, -31, 0, ANIM | NOCROP, "graphics/industries/glass_works.png"]
}
spriteset(glass_works_spriteset_2_snow) {
	[80, 10, 64, 31, -31, 0, ANIM | NOCROP, "graphics/industries/glass_works_snow.png"]
}
spriteset(glass_works_spriteset_3) {
	[150, 10, 64, 31, -31, 0, ANIM | NOCROP, "graphics/industries/glass_works.png"]
}
spriteset(glass_works_spriteset_3_snow) {
	[150, 10, 64, 31, -31, 0, ANIM | NOCROP, "graphics/industries/glass_works_snow.png"]
}
spriteset(glass_works_spriteset_4) {
	[220, 10, 64, 31, -31, 0, ANIM | NOCROP, "graphics/industries/glass_works.png"]
}
spriteset(glass_works_spriteset_4_snow) {
	[220, 10, 64, 31, -31, 0, ANIM | NOCROP, "graphics/industries/glass_works_snow.png"]
}
spriteset(glass_works_spriteset_5) {
	[10, 60, 64, 90, -31, -59, ANIM | NOCROP, "graphics/industries/glass_works.png"]
}
spriteset(glass_works_spriteset_5_snow) {
	[10, 60, 64, 90, -31, -59, ANIM | NOCROP, "graphics/industries/glass_works_snow.png"]
}
spriteset(glass_works_spriteset_6) {
	[80, 60, 64, 90, -31, -71, ANIM | NOCROP, "graphics/industries/glass_works.png"]
}
spriteset(glass_works_spriteset_6_snow) {
	[80, 60, 64, 90, -31, -71, ANIM | NOCROP, "graphics/industries/glass_works_snow.png"]
}
spriteset(glass_works_spriteset_7) {
	[150, 60, 64, 90, -31, -59, ANIM | NOCROP, "graphics/industries/glass_works.png"]
}
spriteset(glass_works_spriteset_7_snow) {
	[150, 60, 64, 90, -31, -59, ANIM | NOCROP, "graphics/industries/glass_works_snow.png"]
}
spriteset(glass_works_spriteset_8) {
	[220, 60, 64, 90, -31, -59, ANIM | NOCROP, "graphics/industries/glass_works.png"]
}
spriteset(glass_works_spriteset_8_snow) {
	[220, 60, 64, 90, -31, -59, ANIM | NOCROP, "graphics/industries/glass_works_snow.png"]
}

spritelayout glass_works_spritelayout_1 {
	childsprite {
		sprite: default_spriteset_ground_cobblestones;
		hide_sprite: 0;
		always_draw: 1;
	}                    
	childsprite {
		sprite: glass_works_spriteset_1(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		hide_sprite: LOAD_TEMP(TEMP_REGISTER_HIDE_TILE);
		always_draw: 1;
	}
	childsprite {
		sprite: glass_works_spriteset_1_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		hide_sprite: LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW);
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: glass_works_spriteset_5(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;
		yoffset: 0;
		zoffset: 0;
		xextent: 16;
		yextent: 16;
		zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: glass_works_spriteset_5_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;
		yoffset: 0;
		zoffset: 0;
		xextent: 16;
		yextent: 16;
		zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout glass_works_spritelayout_2 {
	childsprite {
		sprite: default_spriteset_ground_cobblestones;
		hide_sprite: 0;
		always_draw: 1;
	}
	childsprite {
		sprite: glass_works_spriteset_2(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
		always_draw: 1;
	}
	childsprite {
		sprite: glass_works_spriteset_2_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW));
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: glass_works_spriteset_6(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;
		yoffset: 0;
		zoffset: 0;
		xextent: 16;
		yextent: 16;
		zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: glass_works_spriteset_6_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;
		yoffset: 0;
		zoffset: 0;
		xextent: 16;
		yextent: 16;
		zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW));
	}
	building {
		sprite: glass_works_spriteset_8(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;
		yoffset: 0;
		zoffset: 0;
		xextent: 16;
		yextent: 16;
		zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: glass_works_spriteset_8_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;
		yoffset: 0;
		zoffset: 0;
		xextent: 16;
		yextent: 16;
		zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout glass_works_spritelayout_3 {
	childsprite {
		sprite: default_spriteset_ground_cobblestones;
		hide_sprite: 0;
		always_draw: 1;
	}
	childsprite {
		sprite: glass_works_spriteset_3(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
		always_draw: 1;
	}
	childsprite {
		sprite: glass_works_spriteset_3_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW));
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}	
	building {
		sprite: glass_works_spriteset_7(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;
		yoffset: 0;
		zoffset: 0;
		xextent: 16;
		yextent: 16;
		zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: glass_works_spriteset_7_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;
		yoffset: 0;
		zoffset: 0;
		xextent: 16;
		yextent: 16;
		zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW));
	}
	building {
		sprite: TTD_SMOKE_SPRITE_WHITE_SMALL + (animation_frame / 4);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 13;
		yoffset: 0;
		zoffset: 54+ animation_frame;
		xextent: 11;
		yextent: 16;
		zextent: 7;
		hide_sprite: animation_frame > 19;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout glass_works_spritelayout_4 {
	childsprite {
		sprite: default_spriteset_ground_cobblestones;
		hide_sprite: 0;
		always_draw: 1;
	}
	childsprite {
		sprite: glass_works_spriteset_4(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
		always_draw: 1;
	}
	childsprite {
		sprite: glass_works_spriteset_4_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW));
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}

//////////////////////////////////////////////////////////////////////////////
// graphics choice switch chain
//////////////////////////////////////////////////////////////////////////////

switch(FEAT_INDUSTRYTILES, SELF, glass_works_switch_graphics_layout_1, relative_pos) {
	relative_coord(0, 0): glass_works_spritelayout_4;
	relative_coord(0, 1): glass_works_spritelayout_3;
	relative_coord(0, 2): glass_works_spritelayout_4;
	relative_coord(0, 3): glass_works_spritelayout_3;
	relative_coord(1, 0): glass_works_spritelayout_1;
	relative_coord(1, 1): glass_works_spritelayout_2;
	relative_coord(1, 2): glass_works_spritelayout_1;
	relative_coord(1, 3): glass_works_spritelayout_2;
	relative_coord(2, 0): glass_works_spritelayout_4;
	relative_coord(2, 1): glass_works_spritelayout_3;
	relative_coord(2, 2): glass_works_spritelayout_4;
	relative_coord(2, 3): glass_works_spritelayout_3;
	relative_coord(3, 0): glass_works_spritelayout_1;
	relative_coord(3, 1): glass_works_spritelayout_2;
	relative_coord(3, 2): glass_works_spritelayout_1;
	relative_coord(3, 3): glass_works_spritelayout_2;
	return 0;
}
switch(FEAT_INDUSTRYTILES, SELF, glass_works_switch_graphics_layout_2, relative_pos) {
	relative_coord(0, 0): glass_works_spritelayout_4;
	relative_coord(0, 1): glass_works_spritelayout_3;
	relative_coord(1, 0): glass_works_spritelayout_1;
	relative_coord(1, 1): glass_works_spritelayout_2;
	relative_coord(1, 2): glass_works_spritelayout_4;
	relative_coord(1, 3): glass_works_spritelayout_3;
	relative_coord(2, 0): glass_works_spritelayout_4;
	relative_coord(2, 1): glass_works_spritelayout_3;
	relative_coord(2, 2): glass_works_spritelayout_1;
	relative_coord(2, 3): glass_works_spritelayout_2;
	relative_coord(3, 0): glass_works_spritelayout_1;
	relative_coord(3, 1): glass_works_spritelayout_2;
	return 0;
}
switch(FEAT_INDUSTRYTILES, SELF, glass_works_switch_graphics_layout_3, relative_pos) {
	relative_coord(0, 0): glass_works_spritelayout_4;
	relative_coord(0, 1): glass_works_spritelayout_3;
	relative_coord(0, 2): glass_works_spritelayout_4;
	relative_coord(0, 3): glass_works_spritelayout_3;
	relative_coord(1, 0): glass_works_spritelayout_1;
	relative_coord(1, 1): glass_works_spritelayout_2;
	relative_coord(1, 2): glass_works_spritelayout_1;
	relative_coord(1, 3): glass_works_spritelayout_2;
	relative_coord(2, 1): glass_works_spritelayout_4;
	relative_coord(2, 2): glass_works_spritelayout_3;
	relative_coord(3, 1): glass_works_spritelayout_1;
	relative_coord(3, 2): glass_works_spritelayout_2;
	return 0;
}
switch(FEAT_INDUSTRYTILES, PARENT, glass_works_industry_graphics_switch_layouts, layout_num) {
    1: glass_works_switch_graphics_layout_1;
    2: glass_works_switch_graphics_layout_2;
	3: glass_works_switch_graphics_layout_3;
    glass_works_switch_graphics_layout_1; // default
}

switch(FEAT_INDUSTRYTILES, SELF, glass_works_switch_graphics_construction_state, construction_state) {
    0..2: spritelayout_default_construction_states;
    glass_works_industry_graphics_switch_layouts; // default
}


switch (FEAT_INDUSTRYTILES, SELF, glass_works_switch_graphics,
	[switch_tile_fences(),
	 switch_terrain_sprite(),switch_graphics_init_temp_registers()
]) {
    glass_works_switch_graphics_construction_state;
}

//////////////////////////////////////////////////////////////////////////////
// location checks
//////////////////////////////////////////////////////////////////////////////
// This check works as follows: calculate height of the northernmost tile of the industry and add 0, 1 or 2 for flat, slope. steep slope
// Do the same for the current tile and compare the results. If the result is equal, the terrain is effectively flat
// and industry can be placed.
// It just looks weird due to the stacked ternary operators needed here
switch (FEAT_INDUSTRYTILES, SELF, glass_works_switch_tile_location_check2,
			(nearby_tile_height(-relative_x, -relative_y) + 
			(nearby_tile_slope(-relative_x, -relative_y)== SLOPE_FLAT ? 0 : nearby_tile_slope(-relative_x, -relative_y) == bitmask(IS_STEEP_SLOPE) ? 2 : 1)) 
			== 
			(nearby_tile_height(0, 0) + (nearby_tile_slope(0, 0) == SLOPE_FLAT ? 0 : nearby_tile_slope(0, 0) == bitmask(IS_STEEP_SLOPE) ? 2 : 1))
			) {
	1: return CB_RESULT_LOCATION_ALLOW;
	return CB_RESULT_LOCATION_DISALLOW;
}

switch (FEAT_INDUSTRYTILES, SELF, glass_works_switch_tile_location_check,
	is_funded_or_prospected() || (generation_not_forbidden_by_param() && not_next_to_industry() && not_next_to_buildings()))
{
	1: glass_works_switch_tile_location_check2;
	return CB_RESULT_LOCATION_DISALLOW;
}

//////////////////////////////////////////////////////////////////////////////
// industry tile and layout definition
//////////////////////////////////////////////////////////////////////////////
item(FEAT_INDUSTRYTILES, glass_works_tile, INDUSTRY_TILE_ID_GLASS_WORKS) {
	property {
		substitute:         0;
        land_shape_flags:   0;
        special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        animation_info: [ANIMATION_LOOPING, 71];
        animation_speed: 2;
        animation_triggers: bitmask(ANIM_TRIGGER_INDTILE_CONSTRUCTION_STATE);
	}
	graphics {
		tile_check: glass_works_switch_tile_location_check;
		glass_works_switch_graphics;
	}
}

tilelayout glass_works_tilelayout_1 {
	0, 0: glass_works_tile;
	0, 1: glass_works_tile;
	0, 2: glass_works_tile;
	0, 3: glass_works_tile;
	1, 0: glass_works_tile;
	1, 1: glass_works_tile;
	1, 2: glass_works_tile;
	1, 3: glass_works_tile;
	2, 0: glass_works_tile;
	2, 1: glass_works_tile;
	2, 2: glass_works_tile;
	2, 3: glass_works_tile;
	3, 0: glass_works_tile;
	3, 1: glass_works_tile;
	3, 2: glass_works_tile;
	3, 3: glass_works_tile;
}
tilelayout glass_works_tilelayout_2 {
	0, 0: glass_works_tile;
	0, 1: glass_works_tile;
	1, 0: glass_works_tile;
	1, 1: glass_works_tile;
	1, 2: glass_works_tile;
	1, 3: glass_works_tile;
	2, 0: glass_works_tile;
	2, 1: glass_works_tile;
	2, 2: glass_works_tile;
	2, 3: glass_works_tile;
	3, 0: glass_works_tile;
	3, 1: glass_works_tile;
}
tilelayout glass_works_tilelayout_3 {
	0, 0: glass_works_tile;
	0, 1: glass_works_tile;
	0, 2: glass_works_tile;
	0, 3: glass_works_tile;
	1, 0: glass_works_tile;
	1, 1: glass_works_tile;
	1, 2: glass_works_tile;
	1, 3: glass_works_tile;
	2, 1: glass_works_tile;
	2, 2: glass_works_tile;
	3, 1: glass_works_tile;
	3, 2: glass_works_tile;
}

switch(FEAT_INDUSTRIES, SELF, glass_works_switch_location_check_industry_distance,
       [STORE_TEMP(32, TEMP_REGISTER_TOWN_MIN_DISTANCE),
	    STORE_TEMP(64, TEMP_REGISTER_TOWN_MAX_DISTANCE),
	    (distance_from_town() && 
	    (industry_distance(INDUSTRY_ID_LIME_KILN) >= 32) && 
		(industry_distance(INDUSTRY_ID_SANDPIT) >= 32) && 
		(industry_distance(INDUSTRY_ID_VEHICLE_FACTORY) >= 32) && 
		(industry_distance(INDUSTRY_ID_BREWERY) >= 32) && 
		(industry_distance(INDUSTRY_ID_PACKAGING_PLANT) >= 32) && 
	    (industry_distance(INDUSTRY_ID_GLASS_WORKS) >= 16))]) {
	   1: return CB_RESULT_LOCATION_ALLOW;
	   return CB_RESULT_LOCATION_DISALLOW;
}

produce(glass_works_produce,
	[QLME: LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT) > 0 ? max(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT)*80/100,1) : 0;
	 SAND: LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT) > 0 ? max(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT)*80/100,1) : 0;
	 ],
	[GLAS: LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT) > 0 ? max(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT)*70/100,1) : 0;],
	0 // do not run again
)

// steel_mill uses 10% of stockpile for production, if stockpile is big enough
// if stockpile is < 80t, 8t are produced per 256ticks
// if stockpile is < 8t, whatever is available is used
// it stockpile is empty, nothing is produced
switch(FEAT_INDUSTRIES, SELF, glass_works_switch_produce, 
	[STORE_TEMP(min(incoming_cargo_waiting("QLME"),incoming_cargo_waiting("SAND")), TEMP_REGISTER_INCOMING_CARGO_WAITING0),
	STORE_TEMP(min(incoming_cargo_waiting("QLME"),incoming_cargo_waiting("SAND")), TEMP_REGISTER_INCOMING_CARGO_WAITING1),
	 
	 calculate_raw_material_usage(),
	 calculate_total_production(),

	 store_debug_production_data()
	]) {
	glass_works_produce;
}

switch(FEAT_INDUSTRIES, SELF, glass_works_switch_cargo_subtype, getbits(extra_callback_info2, 16, 8)) {
	QLME: switch_cargo_subtype;
	SAND: switch_cargo_subtype;
	return 0x3800 + string(STR_EMPTY);
}

switch(FEAT_INDUSTRIES, SELF, glass_works_switch_update_last_served_date,
	[update_last_served_date(),
	 STORE_PERM(this_month_production("GLAS") != 0 || last_month_production("GLAS") != 0 || 
		incoming_cargo_waiting("QLME") != 0 || incoming_cargo_waiting("SAND") != 0 ||
		this_month_transported("GLAS") != 0 || last_month_transported("GLAS") != 0, PERM_REGISTER_LAST_SERVED11)
	])
{
	check_secondary_industry_closure();
}
if (param_extension_glass) {
	item(FEAT_INDUSTRIES, glass_works, INDUSTRY_ID_GLASS_WORKS) {
		property {
			substitute: 0;
			map_colour: 138;
			life_type: IND_LIFE_TYPE_PROCESSING;
			min_cargo_distr: 1;
			layouts: [glass_works_tilelayout_1, glass_works_tilelayout_2, glass_works_tilelayout_3];
			spec_flags: bitmask(IND_FLAG_LONG_CARGO_TYPE_LISTS);
			conflicting_ind_types: [];
			random_sound_effects: [];
			name: string(STR_IND_GLASS_WORKS);
			prob_map_gen: 5;
			prob_in_game: 3;
			fund_cost_multiplier: 190;
			remove_cost_multiplier: 0;
			remove_cost_multiplier: 0;
			cargo_types: [accept_cargo("SAND"),accept_cargo("QLME"),produce_cargo("GLAS",0)];
			nearby_station_name: string(STR_STATION, string(STR_TOWN),string(STR_STATION_GLASS_WORKS));
		}
			
		graphics {
			construction_probability: return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
			produce_cargo_arrival:    empty_produce; 
			produce_256_ticks:        glass_works_switch_produce;
			monthly_prod_change:      glass_works_switch_update_last_served_date;
			random_prod_change:       return CB_RESULT_IND_PROD_NO_CHANGE;
			location_check:           glass_works_switch_location_check_industry_distance;
			cargo_subtype_display:    glass_works_switch_cargo_subtype;
			extra_text_fund:          return string(STR_EMPTY);
			build_prod_change:        initialize_last_served_date;
		}
	}
}
