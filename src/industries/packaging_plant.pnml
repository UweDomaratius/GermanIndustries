spriteset(packaging_plant_spriteset_2_0) {
	[10, 60, 64, 70, -31, -35, ANIM | NOCROP, "graphics/industries/tinplate_works.png"]
}
spriteset(packaging_plant_spriteset_3_0) {
	[80, 60, 64, 70, -31, -35, ANIM | NOCROP, "graphics/industries/tinplate_works.png"]
}
spriteset(packaging_plant_spriteset_4_0) {
	[150, 60, 64, 51, -31, -20, ANIM | NOCROP, "graphics/industries/tinplate_works.png"]
}
spriteset(packaging_plant_spriteset_5_0) {
	[220, 60, 64, 51, -31, -23, ANIM | NOCROP, "graphics/industries/tinplate_works.png"]
}
spriteset(packaging_plant_spriteset_6_0) {
	[290, 60, 64, 51, -31, -20, ANIM | NOCROP, "graphics/industries/tinplate_works.png"]
}
spriteset(packaging_plant_spriteset_7_0) {
	[360, 60, 64, 31, -31, 0, ANIM | NOCROP, "graphics/industries/tinplate_works.png"]
}
spriteset(packaging_plant_spriteset_8_0) {
	[430, 60, 64, 31, -31, 0, ANIM | NOCROP, "graphics/industries/tinplate_works.png"]
}

spritelayout packaging_plant_spritelayout_1 {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;	yoffset:  0;	zoffset:  0;
		xextent: 1;		yextent: 16;	zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;	yoffset:  0;	zoffset:  0;
		xextent: 16;	yextent: 1;		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: packaging_plant_spriteset_2_0(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;
		yoffset: 0;
		zoffset: 0;
		xextent: 16;
		yextent: 16;
		zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;		yoffset:  16;	zoffset:  0;
		xextent: 16;	yextent: 1;		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;	yoffset:  0;	zoffset:  0;
		xextent: 1;		yextent: 16;	zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout packaging_plant_spritelayout_2 {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;	yoffset:  0;	zoffset:  0;
		xextent: 1;		yextent: 16;	zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;	yoffset:  0;	zoffset:  0;
		xextent: 16;	yextent: 1;		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: packaging_plant_spriteset_3_0(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;
		yoffset: 0;
		zoffset: 0;
		xextent: 16;
		yextent: 16;
		zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;		yoffset:  16;	zoffset:  0;
		xextent: 16;	yextent: 1;		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;	yoffset:  0;	zoffset:  0;
		xextent: 1;		yextent: 16;	zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout packaging_plant_spritelayout_3 {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;	yoffset:  0;	zoffset:  0;
		xextent: 1;		yextent: 16;	zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;	yoffset:  0;	zoffset:  0;
		xextent: 16;	yextent: 1;		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: packaging_plant_spriteset_4_0(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;
		yoffset: 0;
		zoffset: 0;
		xextent: 16;
		yextent: 16;
		zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;		yoffset:  16;	zoffset:  0;
		xextent: 16;	yextent: 1;		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;	yoffset:  0;	zoffset:  0;
		xextent: 1;		yextent: 16;	zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout packaging_plant_spritelayout_4 {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;	yoffset:  0;	zoffset:  0;
		xextent: 1;		yextent: 16;	zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;	yoffset:  0;	zoffset:  0;
		xextent: 16;	yextent: 1;		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: packaging_plant_spriteset_5_0(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;
		yoffset: 0;
		zoffset: 0;
		xextent: 16;
		yextent: 16;
		zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: TTD_SMOKE_SPRITE_WHITE_SMALL + (animation_frame / 4);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: -5;
		yoffset: 0;
		zoffset: 26+ animation_frame;
		xextent: 11;
		yextent: 16;
		zextent: 7;
		hide_sprite: animation_frame > 19;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;		yoffset:  16;	zoffset:  0;
		xextent: 16;	yextent: 1;		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;	yoffset:  0;	zoffset:  0;
		xextent: 1;		yextent: 16;	zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout packaging_plant_spritelayout_5 {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;	yoffset:  0;	zoffset:  0;
		xextent: 1;		yextent: 16;	zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;	yoffset:  0;	zoffset:  0;
		xextent: 16;	yextent: 1;		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: packaging_plant_spriteset_6_0(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;
		yoffset: 0;
		zoffset: 0;
		xextent: 16;
		yextent: 16;
		zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;		yoffset:  16;	zoffset:  0;
		xextent: 16;	yextent: 1;		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;	yoffset:  0;	zoffset:  0;
		xextent: 1;		yextent: 16;	zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout packaging_plant_spritelayout_6 {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;	yoffset:  0;	zoffset:  0;
		xextent: 1;		yextent: 16;	zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;	yoffset:  0;	zoffset:  0;
		xextent: 16;	yextent: 1;		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: packaging_plant_spriteset_7_0(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;
		yoffset: 0;
		zoffset: 0;
		xextent: 16;
		yextent: 16;
		zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;		yoffset:  16;	zoffset:  0;
		xextent: 16;	yextent: 1;		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;	yoffset:  0;	zoffset:  0;
		xextent: 1;		yextent: 16;	zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout packaging_plant_spritelayout_7 {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;	yoffset:  0;	zoffset:  0;
		xextent: 1;		yextent: 16;	zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;	yoffset:  0;	zoffset:  0;
		xextent: 16;	yextent: 1;		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: packaging_plant_spriteset_8_0(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;
		yoffset: 0;
		zoffset: 0;
		xextent: 16;
		yextent: 16;
		zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;		yoffset:  16;	zoffset:  0;
		xextent: 16;	yextent: 1;		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;	yoffset:  0;	zoffset:  0;
		xextent: 1;		yextent: 16;	zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}

//////////////////////////////////////////////////////////////////////////////
// graphics choice switch chain
//////////////////////////////////////////////////////////////////////////////
switch(FEAT_INDUSTRYTILES, SELF, packaging_plant_switch_graphics_layout1, relative_pos) {
	relative_coord(0, 0): packaging_plant_spritelayout_3;
	relative_coord(0, 1): packaging_plant_spritelayout_3;
	relative_coord(0, 2): packaging_plant_spritelayout_4;
	relative_coord(0, 3): packaging_plant_spritelayout_6;
	relative_coord(0, 4): packaging_plant_spritelayout_5;
	relative_coord(1, 0): packaging_plant_spritelayout_3;
	relative_coord(1, 1): packaging_plant_spritelayout_3;
	relative_coord(1, 2): packaging_plant_spritelayout_7;
	relative_coord(1, 3): packaging_plant_spritelayout_6;
	relative_coord(1, 4): packaging_plant_spritelayout_5;
	relative_coord(2, 0): packaging_plant_spritelayout_3;
	relative_coord(2, 1): packaging_plant_spritelayout_1;
	relative_coord(2, 2): packaging_plant_spritelayout_2;
	relative_coord(2, 3): packaging_plant_spritelayout_7;
	relative_coord(2, 4): packaging_plant_spritelayout_6;
	return 0;
}
switch(FEAT_INDUSTRYTILES, SELF, packaging_plant_switch_graphics_layout2, relative_pos) {
	relative_coord(0, 2): packaging_plant_spritelayout_3;
	relative_coord(0, 3): packaging_plant_spritelayout_3;
	relative_coord(1, 0): packaging_plant_spritelayout_1;
	relative_coord(1, 1): packaging_plant_spritelayout_2;
	relative_coord(1, 2): packaging_plant_spritelayout_3;
	relative_coord(1, 3): packaging_plant_spritelayout_3;
	relative_coord(2, 0): packaging_plant_spritelayout_7;
	relative_coord(2, 1): packaging_plant_spritelayout_7;
	relative_coord(2, 2): packaging_plant_spritelayout_6;
	relative_coord(2, 3): packaging_plant_spritelayout_6;
	relative_coord(3, 0): packaging_plant_spritelayout_4;
	relative_coord(3, 1): packaging_plant_spritelayout_5;
	relative_coord(3, 2): packaging_plant_spritelayout_5;
	relative_coord(3, 3): packaging_plant_spritelayout_5;
	return 0;
}
switch(FEAT_INDUSTRYTILES, SELF, packaging_plant_switch_graphics_layout3, relative_pos) {
	relative_coord(0, 0): packaging_plant_spritelayout_3;
	relative_coord(0, 1): packaging_plant_spritelayout_3;
	relative_coord(0, 2): packaging_plant_spritelayout_3;
	relative_coord(0, 3): packaging_plant_spritelayout_5;
	relative_coord(1, 0): packaging_plant_spritelayout_3;
	relative_coord(1, 1): packaging_plant_spritelayout_3;
	relative_coord(1, 2): packaging_plant_spritelayout_3;
	relative_coord(1, 3): packaging_plant_spritelayout_6;
	relative_coord(2, 0): packaging_plant_spritelayout_5;
	relative_coord(2, 1): packaging_plant_spritelayout_1;
	relative_coord(2, 2): packaging_plant_spritelayout_2;
	relative_coord(2, 3): packaging_plant_spritelayout_7;
	relative_coord(3, 0): packaging_plant_spritelayout_5;
	relative_coord(3, 1): packaging_plant_spritelayout_4;
	relative_coord(3, 2): packaging_plant_spritelayout_7;
	relative_coord(3, 3): packaging_plant_spritelayout_6;
	return 0;
}

switch(FEAT_INDUSTRYTILES, PARENT, packaging_plant_switch_graphics_layouts, layout_num) {
	1: packaging_plant_switch_graphics_layout1;
	2: packaging_plant_switch_graphics_layout2;
	3: packaging_plant_switch_graphics_layout3;
    packaging_plant_switch_graphics_layout1; // default
}

switch(FEAT_INDUSTRYTILES, SELF, packaging_plant_switch_graphics_construction_state, construction_state) {
    0..2: spritelayout_default_construction_states;
    packaging_plant_switch_graphics_layouts; // default
}


switch (FEAT_INDUSTRYTILES, SELF, packaging_plant_switch_graphics,
	[switch_tile_fences(),
	 switch_terrain_sprite(),switch_graphics_init_temp_registers()]) {
    packaging_plant_switch_graphics_construction_state;
}

//////////////////////////////////////////////////////////////////////////////
// location checks
//////////////////////////////////////////////////////////////////////////////
// This check works as follows: calculate height of the northernmost tile of the industry and add 0, 1 or 2 for flat, slope. steep slope
// Do the same for the current tile and compare the results. If the result is equal, the terrain is effectively flat
// and industry can be placed.
// It just looks weird due to the stacked ternary operators needed here
switch (FEAT_INDUSTRYTILES, SELF, packaging_plant_switch_tile_location_check2,
			(nearby_tile_height(-relative_x, -relative_y) + 
			(nearby_tile_slope(-relative_x, -relative_y)== SLOPE_FLAT ? 0 : nearby_tile_slope(-relative_x, -relative_y) == bitmask(IS_STEEP_SLOPE) ? 2 : 1)) 
			== 
			(nearby_tile_height(0, 0) + (nearby_tile_slope(0, 0) == SLOPE_FLAT ? 0 : nearby_tile_slope(0, 0) == bitmask(IS_STEEP_SLOPE) ? 2 : 1))
			) {
	1: return CB_RESULT_LOCATION_ALLOW;
	return CB_RESULT_LOCATION_DISALLOW;
}

switch (FEAT_INDUSTRYTILES, SELF, packaging_plant_switch_tile_location_check,
	is_funded_or_prospected() || (generation_not_forbidden_by_param() && not_next_to_industry() && not_next_to_buildings()))
{
	1: packaging_plant_switch_tile_location_check2;
	return CB_RESULT_LOCATION_DISALLOW;
}

//////////////////////////////////////////////////////////////////////////////
// industry tile and layout definition
//////////////////////////////////////////////////////////////////////////////
item(FEAT_INDUSTRYTILES, packaging_plant_tile, INDUSTRY_TILE_ID_PACKAGING_PLANT) {
	property {
		substitute:         0;
            land_shape_flags:   0;
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
            animation_info: [ANIMATION_LOOPING, 71];
            animation_speed: 2;
            animation_triggers: bitmask();
	}
	graphics {
		tile_check: packaging_plant_switch_tile_location_check;
		packaging_plant_switch_graphics;
	}
}

tilelayout packaging_plant_industry_layout_1_tilelayout {
	0, 0: packaging_plant_tile;
	0, 1: packaging_plant_tile;
	0, 2: packaging_plant_tile;
	0, 3: packaging_plant_tile;
	0, 4: packaging_plant_tile;
	1, 0: packaging_plant_tile;
	1, 1: packaging_plant_tile;
	1, 2: packaging_plant_tile;
	1, 3: packaging_plant_tile;
	1, 4: packaging_plant_tile;
	2, 0: packaging_plant_tile;
	2, 1: packaging_plant_tile;
	2, 2: packaging_plant_tile;
	2, 3: packaging_plant_tile;
	2, 4: packaging_plant_tile;
}
tilelayout packaging_plant_industry_layout_2_tilelayout {
	0, 2: packaging_plant_tile;
	0, 3: packaging_plant_tile;
	1, 0: packaging_plant_tile;
	1, 1: packaging_plant_tile;
	1, 2: packaging_plant_tile;
	1, 3: packaging_plant_tile;
	2, 0: packaging_plant_tile;
	2, 1: packaging_plant_tile;
	2, 2: packaging_plant_tile;
	2, 3: packaging_plant_tile;
	3, 0: packaging_plant_tile;
	3, 1: packaging_plant_tile;
	3, 2: packaging_plant_tile;
	3, 3: packaging_plant_tile;
}
tilelayout packaging_plant_industry_layout_3_tilelayout {
	0, 0: packaging_plant_tile;
	0, 1: packaging_plant_tile;
	0, 2: packaging_plant_tile;
	0, 3: packaging_plant_tile;
	1, 0: packaging_plant_tile;
	1, 1: packaging_plant_tile;
	1, 2: packaging_plant_tile;
	1, 3: packaging_plant_tile;
	2, 0: packaging_plant_tile;
	2, 1: packaging_plant_tile;
	2, 2: packaging_plant_tile;
	2, 3: packaging_plant_tile;
	3, 0: packaging_plant_tile;
	3, 1: packaging_plant_tile;
	3, 2: packaging_plant_tile;
	3, 3: packaging_plant_tile;
}

switch(FEAT_INDUSTRIES, SELF, packaging_plant_switch_location_check_industry_distance,
       [STORE_TEMP(32, TEMP_REGISTER_TOWN_MIN_DISTANCE),
	    STORE_TEMP(64, TEMP_REGISTER_TOWN_MAX_DISTANCE),
	    (distance_from_town() && 
	    (industry_distance(INDUSTRY_ID_ALUMINIUM_PLANT) >= 32) && 
		(industry_distance(INDUSTRY_ID_PLASTICS_PLANT) >= 32) && 
		(industry_distance(INDUSTRY_ID_PHARMACEUTICAL_PLANT) >= 32) && 
		(industry_distance(INDUSTRY_ID_FURNITURE_FACTORY) >= 32) && 
		(industry_distance(INDUSTRY_ID_FOOD_PROCESSOR) >= 32) && 
		(industry_distance(INDUSTRY_ID_STOCKYARD) >= 32) && 
		(industry_distance(INDUSTRY_ID_DAIRY) >= 32) && 
		(industry_distance(INDUSTRY_ID_FLOUR_MILL) >= 32) && 
		(industry_distance(INDUSTRY_ID_CLOTHING_PLANT) >= 32) && 
	    (industry_distance(INDUSTRY_ID_PACKAGING_PLANT) >= 16))]) {
	   1: return CB_RESULT_LOCATION_ALLOW;
	   return CB_RESULT_LOCATION_DISALLOW;
}

produce(packaging_plant_produce,
	[PLAS: LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW0);],
	[MNSP: LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT) > 0 ? max(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT) * LOAD_TEMP(TEMP_REGISTER_PARAM_PRODUCTION_SCALE) / 100,1) : 0;],
	0 // do not run again
)

switch(FEAT_INDUSTRIES, SELF, packaging_plant_switch_produce, 
	[STORE_TEMP(incoming_cargo_waiting("PLAS"),TEMP_REGISTER_INCOMING_CARGO_WAITING0),
	 
	 calculate_raw_material_usage(),
	 calculate_total_production(),
	 calculate_number_of_waiting_cargos(),
	 
	 // calculate productivity: 50% with 1 waiting cargo, 90% with 2 waiting cargos
	 // formula: 50 + (num_waiting_cargos-1)*(40 / (number of possible cargos-1))
	 STORE_TEMP(50 + (LOAD_TEMP(TEMP_REGISTER_NUMBER_OF_WAITING_CARGOS)-1) * (40 / (2-1)), TEMP_REGISTER_PARAM_PRODUCTION_SCALE),
	 
	 store_debug_production_data()
	])
{
	packaging_plant_produce;
}

produce(packaging_plant_produce_ext_aluminium,
	[PLAS: LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW0);
	 ALUM: LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW1);],
	[MNSP: LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT) > 0 ? max(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT) * LOAD_TEMP(TEMP_REGISTER_PARAM_PRODUCTION_SCALE) / 100,1) : 0;],
	0 // do not run again
)

switch(FEAT_INDUSTRIES, SELF, packaging_plant_switch_produce_ext_aluminium, 
	[STORE_TEMP(incoming_cargo_waiting("PLAS"),TEMP_REGISTER_INCOMING_CARGO_WAITING0),
	STORE_TEMP(incoming_cargo_waiting("ALUM"),TEMP_REGISTER_INCOMING_CARGO_WAITING1),
	 
	 calculate_raw_material_usage(),
	 calculate_total_production(),
	 calculate_number_of_waiting_cargos(),
	 
	 // calculate productivity: 50% with 1 waiting cargo, 90% with 2 waiting cargos
	 // formula: 50 + (num_waiting_cargos-1)*(40 / (number of possible cargos-1))
	 STORE_TEMP(50 + (LOAD_TEMP(TEMP_REGISTER_NUMBER_OF_WAITING_CARGOS)-1) * (40 / (3-1)), TEMP_REGISTER_PARAM_PRODUCTION_SCALE),
	 
	 store_debug_production_data()
	])
{
	packaging_plant_produce_ext_aluminium;
}

switch(FEAT_INDUSTRIES, SELF, packaging_plant_switch_extra_text_fund, 
	[STORE_TEMP(string(STR_1930), TEMP_REGISTER_EXTRA_TEXT_ARG0),
	current_year]) {
	1930..500000: return string(STR_EMPTY);
	return string(STR_INDUSTRY_NOT_AVAILABLE_BEFORE);
}

switch(FEAT_INDUSTRIES, SELF, packaging_plant_switch_check_availability, 
	current_year) {
	0..1929: return CB_RESULT_IND_NO_CONSTRUCTION;
	return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

switch(FEAT_INDUSTRIES, SELF, packaging_plant_switch_extra_text_fund_ext_aluminium, 
	[STORE_TEMP(string(STR_1900), TEMP_REGISTER_EXTRA_TEXT_ARG0),
	current_year]) {
	1900..500000: return string(STR_EMPTY);
	return string(STR_INDUSTRY_NOT_AVAILABLE_BEFORE);
}

switch(FEAT_INDUSTRIES, SELF, packaging_plant_switch_check_availability_ext_aluminium, 
	current_year) {
	0..1899: return CB_RESULT_IND_NO_CONSTRUCTION;
	return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

switch(FEAT_INDUSTRIES, SELF, packaging_plant_switch_cargo_subtype, getbits(extra_callback_info2, 16, 8)) {
	ALUM: switch_cargo_subtype;
	PLAS: switch_cargo_subtype;
	return 0x3800 + string(STR_EMPTY);
}

switch(FEAT_INDUSTRIES, SELF,packaging_plant_switch_update_last_served_date,
	[update_last_served_date(),
	 STORE_PERM(this_month_production("MNSP") != 0 || last_month_production("MNSP") != 0 || 
		incoming_cargo_waiting("PLAS") != 0 ||
		this_month_transported("MNSP") != 0 || last_month_transported("MNSP") != 0, PERM_REGISTER_LAST_SERVED11)
	])
{
	check_secondary_industry_closure();
}

switch(FEAT_INDUSTRIES, SELF,packaging_plant_switch_update_last_served_date_ext_aluminium,
	[update_last_served_date(),
	 STORE_PERM(this_month_production("MNSP") != 0 || last_month_production("MNSP") != 0 || 
		incoming_cargo_waiting("PLAS") != 0 || incoming_cargo_waiting("ALUM") != 0 ||
		this_month_transported("MNSP") != 0 || last_month_transported("MNSP") != 0, PERM_REGISTER_LAST_SERVED11)
	])
{
	check_secondary_industry_closure();
}

if (param_extension_packaging_industries && !param_extension_aluminium) {
	item(FEAT_INDUSTRIES, packaging_plant, INDUSTRY_ID_PACKAGING_PLANT) {
		property {
			substitute: 0;
			map_colour: 62;
			life_type: IND_LIFE_TYPE_PROCESSING;
			min_cargo_distr: 1;
			layouts: [packaging_plant_industry_layout_1_tilelayout,packaging_plant_industry_layout_2_tilelayout,packaging_plant_industry_layout_3_tilelayout];
			spec_flags: bitmask(IND_FLAG_LONG_CARGO_TYPE_LISTS);
			conflicting_ind_types: [];
			random_sound_effects: [];
			name: string(STR_IND_PACKAGING_PLANT);
			prob_map_gen: 5;
			prob_in_game: 3;
			fund_cost_multiplier: 170;
			remove_cost_multiplier: 0;
			remove_cost_multiplier: 0;
			cargo_types: [accept_cargo("PLAS"),produce_cargo("MNSP",0)];
			nearby_station_name: string(STR_STATION, string(STR_TOWN),string(STR_STATION_PACKAGING_PLANT));
		}
			
		graphics {
			construction_probability: packaging_plant_switch_check_availability;
			produce_cargo_arrival:    empty_produce; 
			produce_256_ticks:        packaging_plant_switch_produce_ext_aluminium;
			monthly_prod_change:      packaging_plant_switch_update_last_served_date;
			random_prod_change:       return CB_RESULT_IND_PROD_NO_CHANGE;
			location_check:           packaging_plant_switch_location_check_industry_distance;
			extra_text_industry:      return string(STR_INDUSTRY_NEEDS_ANY_INPUT);
			extra_text_fund:          packaging_plant_switch_extra_text_fund;
			cargo_subtype_display:    packaging_plant_switch_cargo_subtype;
			build_prod_change:        initialize_last_served_date;
		}
	}
}

if (param_extension_packaging_industries && param_extension_aluminium) {
	item(FEAT_INDUSTRIES, packaging_plant, INDUSTRY_ID_PACKAGING_PLANT) {
		property {
			substitute: 0;
			map_colour: 62;
			life_type: IND_LIFE_TYPE_PROCESSING;
			min_cargo_distr: 1;
			layouts: [packaging_plant_industry_layout_1_tilelayout,packaging_plant_industry_layout_2_tilelayout,packaging_plant_industry_layout_3_tilelayout];
			spec_flags: bitmask(IND_FLAG_LONG_CARGO_TYPE_LISTS);
			conflicting_ind_types: [];
			random_sound_effects: [];
			name: string(STR_IND_PACKAGING_PLANT);
			prob_map_gen: 5;
			prob_in_game: 3;
			fund_cost_multiplier: 170;
			remove_cost_multiplier: 0;
			remove_cost_multiplier: 0;
			cargo_types: [accept_cargo("PLAS"),accept_cargo("ALUM"),produce_cargo("MNSP",0)];
			nearby_station_name: string(STR_STATION, string(STR_TOWN),string(STR_STATION_PACKAGING_PLANT));
		}
			
		graphics {
			construction_probability: packaging_plant_switch_check_availability_ext_aluminium;
			produce_cargo_arrival:    empty_produce; 
			produce_256_ticks:        packaging_plant_switch_produce;
			monthly_prod_change:      packaging_plant_switch_update_last_served_date_ext_aluminium;
			random_prod_change:       return CB_RESULT_IND_PROD_NO_CHANGE;
			location_check:           packaging_plant_switch_location_check_industry_distance;
			extra_text_industry:      return string(STR_INDUSTRY_NEEDS_ANY_INPUT);
			extra_text_fund:          packaging_plant_switch_extra_text_fund_ext_aluminium;
			cargo_subtype_display:    packaging_plant_switch_cargo_subtype;
			build_prod_change:        initialize_last_served_date;
		}
	}
}
