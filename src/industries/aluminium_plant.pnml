spriteset(aluminium_plant_spriteset_2_0) {
    [10, 10, 64, 57, -31, -26, ANIM | NOCROP, "graphics/industries/aluminium_plant.png"]
}
spriteset(aluminium_plant_spriteset_2_0_snow) {
	[10, 10, 64, 57, -31, -26, ANIM | NOCROP, "graphics/industries/aluminium_plant_snow.png"]
}
spriteset(aluminium_plant_spriteset_3_0) {
	[80, 10, 64, 66, -31, -26, ANIM | NOCROP, "graphics/industries/aluminium_plant.png"]
}
spriteset(aluminium_plant_spriteset_3_0_snow) {
	[80, 10, 64, 66, -31, -26, ANIM | NOCROP, "graphics/industries/aluminium_plant_snow.png"]
}
spriteset(aluminium_plant_spriteset_4_0) {
	[150, 10, 64, 92, -31, -61, ANIM | NOCROP, "graphics/industries/aluminium_plant.png"]
}
spriteset(aluminium_plant_spriteset_4_0_snow) {
	[150, 10, 64, 92, -31, -61, ANIM | NOCROP, "graphics/industries/aluminium_plant_snow.png"]
}
spriteset(aluminium_plant_spriteset_5_0) {
	[220, 10, 64, 90, -31, -61, ANIM | NOCROP, "graphics/industries/aluminium_plant.png"]
}
spriteset(aluminium_plant_spriteset_5_0_snow) {
	[220, 10, 64, 90, -31, -61, ANIM | NOCROP, "graphics/industries/aluminium_plant_snow.png"]
}
spriteset(aluminium_plant_spriteset_6_0) {
	[290, 10, 64, 100, -31, -61, ANIM | NOCROP, "graphics/industries/aluminium_plant.png"]
}
spriteset(aluminium_plant_spriteset_6_0_snow) {
	[290, 10, 64, 100, -31, -61, ANIM | NOCROP, "graphics/industries/aluminium_plant_snow.png"]
}
spriteset(aluminium_plant_spriteset_7_0) {
	[360, 10, 64, 100, -31, -61, ANIM | NOCROP, "graphics/industries/aluminium_plant.png"]
}
spriteset(aluminium_plant_spriteset_7_0_snow) {
	[360, 10, 64, 100, -31, -61, ANIM | NOCROP, "graphics/industries/aluminium_plant_snow.png"]
}
spriteset(aluminium_plant_spriteset_8_0) {
	[430, 10, 64, 56, -31, -26, ANIM | NOCROP, "graphics/industries/aluminium_plant.png"]
}
spriteset(aluminium_plant_spriteset_8_0_snow) {
	[430, 10, 64, 56, -31, -26, ANIM | NOCROP, "graphics/industries/aluminium_plant_snow.png"]
}
spriteset(aluminium_plant_spriteset_9_0) {
	[500, 10, 64, 56, -31, -26, ANIM | NOCROP, "graphics/industries/aluminium_plant.png"]
}
spriteset(aluminium_plant_spriteset_9_0_snow) {
	[500, 10, 64, 56, -31, -26, ANIM | NOCROP, "graphics/industries/aluminium_plant_snow.png"]
}
spriteset(aluminium_plant_spriteset_10_0) {
	[570, 10, 64, 110, -31, -61, ANIM | NOCROP, "graphics/industries/aluminium_plant.png"]
}
spriteset(aluminium_plant_spriteset_10_0_snow) {
	[570, 10, 64, 110, -31, -61, ANIM | NOCROP, "graphics/industries/aluminium_plant_snow.png"]
}
spriteset(aluminium_plant_spriteset_11_0) {
	[640, 10, 64, 110, -31, -61, ANIM | NOCROP, "graphics/industries/aluminium_plant.png"]
}
spriteset(aluminium_plant_spriteset_11_0_snow) {
	[640, 10, 64, 110, -31, -61, ANIM | NOCROP, "graphics/industries/aluminium_plant_snow.png"]
}
spriteset(aluminium_plant_spriteset_12_0) {
	[710, 10, 64, 110, -31, -61, ANIM | NOCROP, "graphics/industries/aluminium_plant.png"]
}
spriteset(aluminium_plant_spriteset_12_0_snow) {
	[710, 10, 64, 110, -31, -61, ANIM | NOCROP, "graphics/industries/aluminium_plant_snow.png"]
}
spritelayout aluminium_plant_spritelayout_1 {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: aluminium_plant_spriteset_2_0(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: aluminium_plant_spriteset_2_0_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout aluminium_plant_spritelayout_2 {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: aluminium_plant_spriteset_3_0(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: aluminium_plant_spriteset_3_0_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout aluminium_plant_spritelayout_3 {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: aluminium_plant_spriteset_4_0(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: aluminium_plant_spriteset_4_0_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout aluminium_plant_spritelayout_4 {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: aluminium_plant_spriteset_5_0(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: aluminium_plant_spriteset_5_0_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW));
	}
	building {
		sprite: TTD_SMOKE_SPRITE_DARK_SMALL + (animation_frame / 4);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 5;
		yoffset: 0;
		zoffset: 64+ animation_frame;
		xextent: 11;
		yextent: 16;
		zextent: 7;
		hide_sprite: animation_frame > 19;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout aluminium_plant_spritelayout_5 {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: aluminium_plant_spriteset_6_0(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: aluminium_plant_spriteset_6_0_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout aluminium_plant_spritelayout_6 {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: aluminium_plant_spriteset_7_0(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: aluminium_plant_spriteset_7_0_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout aluminium_plant_spritelayout_7 {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: aluminium_plant_spriteset_8_0(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: aluminium_plant_spriteset_8_0_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout aluminium_plant_spritelayout_8 {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: aluminium_plant_spriteset_9_0(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: aluminium_plant_spriteset_9_0_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout aluminium_plant_spritelayout_9 {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: aluminium_plant_spriteset_10_0(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: aluminium_plant_spriteset_10_0_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout aluminium_plant_spritelayout_10 {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: aluminium_plant_spriteset_11_0(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: aluminium_plant_spriteset_11_0_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout aluminium_plant_spritelayout_11 {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: aluminium_plant_spriteset_12_0(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: aluminium_plant_spriteset_12_0_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout aluminium_plant_spritelayout_concrete {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout aluminium_plant_spritelayout_transformer {
	childsprite {
		sprite: default_spriteset_ground_concrete;
		hide_sprite: 0;
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_POWER_PLANT_SUBSTATION;
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 0;		yoffset: 0;		zoffset: 0;
		xextent: 16;	yextent: 16;	zextent: 16;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}

//////////////////////////////////////////////////////////////////////////////
// graphics choice switch chain
//////////////////////////////////////////////////////////////////////////////

switch(FEAT_INDUSTRYTILES, SELF, aluminium_plant_switch_graphics_layout_1, relative_pos) {
	relative_coord(0, 1): aluminium_plant_spritelayout_transformer;
	relative_coord(0, 2): aluminium_plant_spritelayout_concrete;
	relative_coord(0, 3): aluminium_plant_spritelayout_11;
	relative_coord(1, 2): aluminium_plant_spritelayout_9;
	relative_coord(1, 3): aluminium_plant_spritelayout_10;
	relative_coord(2, 0): aluminium_plant_spritelayout_3;
	relative_coord(2, 1): aluminium_plant_spritelayout_1;
	relative_coord(2, 2): aluminium_plant_spritelayout_5;
	relative_coord(2, 3): aluminium_plant_spritelayout_6;
	relative_coord(3, 0): aluminium_plant_spritelayout_4;
	relative_coord(3, 1): aluminium_plant_spritelayout_1;
	relative_coord(3, 2): aluminium_plant_spritelayout_concrete;
	relative_coord(3, 3): aluminium_plant_spritelayout_8;
	relative_coord(4, 0): aluminium_plant_spritelayout_1;
	relative_coord(4, 1): aluminium_plant_spritelayout_1;
	relative_coord(4, 2): aluminium_plant_spritelayout_1;
	relative_coord(4, 3): aluminium_plant_spritelayout_2;
	relative_coord(5, 0): aluminium_plant_spritelayout_1;
	relative_coord(5, 1): aluminium_plant_spritelayout_1;
	relative_coord(5, 2): aluminium_plant_spritelayout_1;
	relative_coord(5, 3): aluminium_plant_spritelayout_7;
	return 0;
}
switch(FEAT_INDUSTRYTILES, SELF, aluminium_plant_switch_graphics_layout_2, relative_pos) {
	relative_coord(0, 0): aluminium_plant_spritelayout_1;
	relative_coord(0, 1): aluminium_plant_spritelayout_concrete;
	relative_coord(0, 2): aluminium_plant_spritelayout_1;
	relative_coord(0, 3): aluminium_plant_spritelayout_concrete;
	relative_coord(0, 4): aluminium_plant_spritelayout_11;
	relative_coord(1, 0): aluminium_plant_spritelayout_1;
	relative_coord(1, 1): aluminium_plant_spritelayout_4;
	relative_coord(1, 2): aluminium_plant_spritelayout_1;
	relative_coord(1, 3): aluminium_plant_spritelayout_9;
	relative_coord(1, 4): aluminium_plant_spritelayout_10;
	relative_coord(2, 0): aluminium_plant_spritelayout_1;
	relative_coord(2, 1): aluminium_plant_spritelayout_3;
	relative_coord(2, 2): aluminium_plant_spritelayout_1;
	relative_coord(2, 3): aluminium_plant_spritelayout_5;
	relative_coord(2, 4): aluminium_plant_spritelayout_6;
	relative_coord(3, 0): aluminium_plant_spritelayout_1;
	relative_coord(3, 1): aluminium_plant_spritelayout_concrete;
	relative_coord(3, 2): aluminium_plant_spritelayout_1;
	relative_coord(3, 3): aluminium_plant_spritelayout_8;
	relative_coord(3, 4): aluminium_plant_spritelayout_concrete;
	relative_coord(4, 0): aluminium_plant_spritelayout_1;
	relative_coord(4, 1): aluminium_plant_spritelayout_transformer;
	relative_coord(4, 2): aluminium_plant_spritelayout_1;
	relative_coord(4, 3): aluminium_plant_spritelayout_2;
	relative_coord(4, 4): aluminium_plant_spritelayout_7;
	return 0;
}
switch(FEAT_INDUSTRYTILES, SELF, aluminium_plant_switch_graphics_layout_3, relative_pos) {
	relative_coord(0, 0): aluminium_plant_spritelayout_transformer;
	relative_coord(1, 0): aluminium_plant_spritelayout_3;
	relative_coord(1, 1): aluminium_plant_spritelayout_2;
	relative_coord(2, 0): aluminium_plant_spritelayout_4;
	relative_coord(2, 1): aluminium_plant_spritelayout_8;
	relative_coord(3, 0): aluminium_plant_spritelayout_1;
	relative_coord(3, 1): aluminium_plant_spritelayout_1;
	relative_coord(4, 0): aluminium_plant_spritelayout_1;
	relative_coord(4, 1): aluminium_plant_spritelayout_1;
	relative_coord(5, 0): aluminium_plant_spritelayout_1;
	relative_coord(5, 1): aluminium_plant_spritelayout_1;
	relative_coord(6, 0): aluminium_plant_spritelayout_7;
	relative_coord(6, 1): aluminium_plant_spritelayout_7;
	relative_coord(7, 0): aluminium_plant_spritelayout_9;
	relative_coord(7, 1): aluminium_plant_spritelayout_11;
	relative_coord(8, 0): aluminium_plant_spritelayout_9;
	relative_coord(8, 1): aluminium_plant_spritelayout_10;
	relative_coord(9, 0): aluminium_plant_spritelayout_5;
	relative_coord(9, 1): aluminium_plant_spritelayout_6;
	return 0;
}
switch(FEAT_INDUSTRYTILES, PARENT, aluminium_plant_industry_graphics_switch_layouts, layout_num) {
	1: aluminium_plant_switch_graphics_layout_1;
	2: aluminium_plant_switch_graphics_layout_2;
	3: aluminium_plant_switch_graphics_layout_3;
    aluminium_plant_switch_graphics_layout_1; // default
}

switch(FEAT_INDUSTRYTILES, SELF, aluminium_plant_switch_graphics_construction_state, construction_state) {
    0..2: spritelayout_default_construction_states;
    aluminium_plant_industry_graphics_switch_layouts; // default
}


switch (FEAT_INDUSTRYTILES, SELF, aluminium_plant_switch_graphics,
	[switch_tile_fences(),
	 switch_terrain_sprite(),switch_graphics_init_temp_registers()
]) {
    aluminium_plant_switch_graphics_construction_state;
}

//////////////////////////////////////////////////////////////////////////////
// location checks
//////////////////////////////////////////////////////////////////////////////
// This check works as follows: calculate height of the northernmost tile of the industry and add 0, 1 or 2 for flat, slope. steep slope
// Do the same for the current tile and compare the results. If the result is equal, the terrain is effectively flat
// and industry can be placed.
// It just looks weird due to the stacked ternary operators needed here
switch (FEAT_INDUSTRYTILES, SELF, aluminium_plant_switch_tile_location_check2,
			(nearby_tile_height(-relative_x, -relative_y) + 
			(nearby_tile_slope(-relative_x, -relative_y)== SLOPE_FLAT ? 0 : nearby_tile_slope(-relative_x, -relative_y) == bitmask(IS_STEEP_SLOPE) ? 2 : 1)) 
			== 
			(nearby_tile_height(0, 0) + (nearby_tile_slope(0, 0) == SLOPE_FLAT ? 0 : nearby_tile_slope(0, 0) == bitmask(IS_STEEP_SLOPE) ? 2 : 1))
			) {
	1: return CB_RESULT_LOCATION_ALLOW;
	return CB_RESULT_LOCATION_DISALLOW;
}

switch (FEAT_INDUSTRYTILES, SELF, aluminium_plant_switch_tile_location_check,
	is_funded_or_prospected() || (generation_not_forbidden_by_param() && not_next_to_industry() && not_next_to_buildings()))
{
	1: aluminium_plant_switch_tile_location_check2;
	return CB_RESULT_LOCATION_DISALLOW;
}

//////////////////////////////////////////////////////////////////////////////
// industry tile and layout definition
//////////////////////////////////////////////////////////////////////////////
item(FEAT_INDUSTRYTILES, aluminium_plant_tile, INDUSTRY_TILE_ID_ALUMINIUM_PLANT) {
	property {
		substitute:         0;
		land_shape_flags:   0;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
		animation_info: [ANIMATION_LOOPING, 47];
        animation_speed: 2;
		animation_triggers: bitmask();
	}
	graphics {
		tile_check: aluminium_plant_switch_tile_location_check;
		aluminium_plant_switch_graphics;
	}
}

tilelayout aluminium_plant_tilelayout_1 {
	0, 1: aluminium_plant_tile;
	0, 2: aluminium_plant_tile;
	0, 3: aluminium_plant_tile;
	1, 2: aluminium_plant_tile;
	1, 3: aluminium_plant_tile;
	2, 0: aluminium_plant_tile;
	2, 1: aluminium_plant_tile;
	2, 2: aluminium_plant_tile;
	2, 3: aluminium_plant_tile;
	3, 0: aluminium_plant_tile;
	3, 1: aluminium_plant_tile;
	3, 2: aluminium_plant_tile;
	3, 3: aluminium_plant_tile;
	4, 0: aluminium_plant_tile;
	4, 1: aluminium_plant_tile;
	4, 2: aluminium_plant_tile;
	4, 3: aluminium_plant_tile;
	5, 0: aluminium_plant_tile;
	5, 1: aluminium_plant_tile;
	5, 2: aluminium_plant_tile;
	5, 3: aluminium_plant_tile;
}
tilelayout aluminium_plant_tilelayout_2 {
	0, 0: aluminium_plant_tile;
	0, 1: aluminium_plant_tile;
	0, 2: aluminium_plant_tile;
	0, 3: aluminium_plant_tile;
	0, 4: aluminium_plant_tile;
	1, 0: aluminium_plant_tile;
	1, 1: aluminium_plant_tile;
	1, 2: aluminium_plant_tile;
	1, 3: aluminium_plant_tile;
	1, 4: aluminium_plant_tile;
	2, 0: aluminium_plant_tile;
	2, 1: aluminium_plant_tile;
	2, 2: aluminium_plant_tile;
	2, 3: aluminium_plant_tile;
	2, 4: aluminium_plant_tile;
	3, 0: aluminium_plant_tile;
	3, 1: aluminium_plant_tile;
	3, 2: aluminium_plant_tile;
	3, 3: aluminium_plant_tile;
	3, 4: aluminium_plant_tile;
	4, 0: aluminium_plant_tile;
	4, 1: aluminium_plant_tile;
	4, 2: aluminium_plant_tile;
	4, 3: aluminium_plant_tile;
	4, 4: aluminium_plant_tile;
}
tilelayout aluminium_plant_tilelayout_3 {
	0, 0: aluminium_plant_tile;
	1, 0: aluminium_plant_tile;
	1, 1: aluminium_plant_tile;
	2, 0: aluminium_plant_tile;
	2, 1: aluminium_plant_tile;
	3, 0: aluminium_plant_tile;
	3, 1: aluminium_plant_tile;
	4, 0: aluminium_plant_tile;
	4, 1: aluminium_plant_tile;
	5, 0: aluminium_plant_tile;
	5, 1: aluminium_plant_tile;
	6, 0: aluminium_plant_tile;
	6, 1: aluminium_plant_tile;
	7, 0: aluminium_plant_tile;
	7, 1: aluminium_plant_tile;
	8, 0: aluminium_plant_tile;
	8, 1: aluminium_plant_tile;
	9, 0: aluminium_plant_tile;
	9, 1: aluminium_plant_tile;
}

switch(FEAT_INDUSTRIES, SELF, aluminium_plant_switch_location_check_industry_distance,
       [STORE_TEMP(32, TEMP_REGISTER_TOWN_MIN_DISTANCE),
	    STORE_TEMP(64, TEMP_REGISTER_TOWN_MAX_DISTANCE),
	    (distance_from_town() && 
		(industry_town_count(INDUSTRY_ID_POWER_PLANT) > 0) && // industry requires a power plant in the city
		(industry_town_count(INDUSTRY_ID_ALUMINIUM_PLANT) == 0) && // only allow one plant per city
		(industry_distance(INDUSTRY_ID_PORT) >= 32) && 
		(industry_distance(INDUSTRY_ID_VEHICLE_FACTORY) >= 32) && 
	    (industry_distance(INDUSTRY_ID_ALUMINIUM_PLANT) >= 16))]) {
	   1: return CB_RESULT_LOCATION_ALLOW;
	   return CB_RESULT_LOCATION_DISALLOW;
}

// according to google 4-5t bauxite yield 1t of aluminium
produce(aluminium_plant_produce,
	[AORE: LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT);],
	[ALUM: max(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT)*25/100,1);],
	0 // do not run again
)

switch(FEAT_INDUSTRIES, PARENT, aluminium_plant_update_city_persistent_storage,
	[
		STORE_PERM(LOAD_TEMP(TEMP_REGISTER_POWER_DEMAND)+LOAD_PERM(PERM_REGISTER_CITY_POWER_DEMAND), PERM_REGISTER_CITY_POWER_DEMAND),
		STORE_PERM(LOAD_PERM(PERM_REGISTER_CITY_POWER_AVAILABLE) - LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT), PERM_REGISTER_CITY_POWER_AVAILABLE)
	]
)
{
	aluminium_plant_produce;
}

// TODO: factor in how much energy is needed to produce one item - currently it's 1:1
switch(FEAT_INDUSTRIES, SELF, aluminium_plant_update_production_according_to_power,
	[
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT), PERM_REGISTER_POWER_DEMAND),
	 STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT), TEMP_REGISTER_POWER_DEMAND),
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT), PERM_REGISTER_MAXIMUM_PRODUCTION_AMOUNT),
	 // reduce amount of production if not enough electricity is available
	 STORE_TEMP(min(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT),city_get_power_available()), TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT),
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT), PERM_REGISTER_PRODUCTION_AMOUNT),
	 STORE_PERM((LOAD_PERM(PERM_REGISTER_PRODUCTION_AMOUNT) * 100) / LOAD_PERM(PERM_REGISTER_MAXIMUM_PRODUCTION_AMOUNT), PERM_REGISTER_PRODUCTION_PERCENTAGE),
	])
{
	aluminium_plant_update_city_persistent_storage;
}

switch(FEAT_INDUSTRIES, SELF, aluminium_plant_switch_produce, 
	[STORE_TEMP(incoming_cargo_waiting("AORE"), TEMP_REGISTER_INCOMING_CARGO_WAITING0),
	 calculate_raw_material_usage(),
	 calculate_total_production(),
	
	 param_electricity_needed
	]) {
	1: aluminium_plant_update_production_according_to_power;
	aluminium_plant_produce;
}

produce(aluminium_plant_produce_basic_anorganic_chemistry,
	[AORE: LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT);
	 LYE_: LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT) > 0 ? max(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT)*30/100,1) : 0;],
	[ALUM: LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT) > 0 ? max(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT)*25/100,1) : 0;],
	0 // do not run again
)

switch(FEAT_INDUSTRIES, PARENT, aluminium_plant_update_city_persistent_storage_basic_anorganic_chemistry,
	[
		STORE_PERM(LOAD_TEMP(TEMP_REGISTER_POWER_DEMAND)+LOAD_PERM(PERM_REGISTER_CITY_POWER_DEMAND), PERM_REGISTER_CITY_POWER_DEMAND),
		STORE_PERM(LOAD_PERM(PERM_REGISTER_CITY_POWER_AVAILABLE) - LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT), PERM_REGISTER_CITY_POWER_AVAILABLE)
	]
)
{
	aluminium_plant_produce_basic_anorganic_chemistry;
}

// TODO: factor in how much energy is needed to produce one item - currently it's 1:1
switch(FEAT_INDUSTRIES, SELF, aluminium_plant_update_production_according_to_power_basic_anorganic_chemistry,
	[
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT), PERM_REGISTER_POWER_DEMAND),
	 STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT), TEMP_REGISTER_POWER_DEMAND),
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT), PERM_REGISTER_MAXIMUM_PRODUCTION_AMOUNT),
	 // reduce amount of production if not enough electricity is available
	 STORE_TEMP(min(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT),city_get_power_available()), TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT),
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT), PERM_REGISTER_PRODUCTION_AMOUNT),
	 STORE_PERM((LOAD_PERM(PERM_REGISTER_PRODUCTION_AMOUNT) * 100) / LOAD_PERM(PERM_REGISTER_MAXIMUM_PRODUCTION_AMOUNT), PERM_REGISTER_PRODUCTION_PERCENTAGE),
	])
{
	aluminium_plant_update_city_persistent_storage_basic_anorganic_chemistry;
}

switch(FEAT_INDUSTRIES, SELF, aluminium_plant_switch_produce_basic_anorganic_chemistry, 
	[STORE_TEMP(min(incoming_cargo_waiting("AORE"),incoming_cargo_waiting("LYE_")), TEMP_REGISTER_INCOMING_CARGO_WAITING0),
	 calculate_raw_material_usage(),
	 calculate_total_production(),
	 
	 param_electricity_needed
	]) {
	1: aluminium_plant_update_production_according_to_power_basic_anorganic_chemistry;
	aluminium_plant_produce_basic_anorganic_chemistry;
}

switch(FEAT_INDUSTRIES, SELF, aluminium_plant_switch_update_last_served_date,
	[update_last_served_date(),
	 STORE_PERM(this_month_production("ALUM") != 0 || last_month_production("ALUM") != 0 || 
		incoming_cargo_waiting("AORE") != 0 || 
		this_month_transported("ALUM") != 0 || last_month_transported("ALUM") != 0, PERM_REGISTER_LAST_SERVED11)
	])
{
	check_secondary_industry_closure();
}

switch(FEAT_INDUSTRIES, SELF, aluminium_plant_switch_update_last_served_date_basic_anorganic_chemistry,
	[update_last_served_date(),
	 STORE_PERM(this_month_production("ALUM") != 0 || last_month_production("ALUM") != 0 || 
		incoming_cargo_waiting("AORE") != 0 || incoming_cargo_waiting("LYE_") != 0 || 
		this_month_transported("ALUM") != 0 || last_month_transported("ALUM") != 0, PERM_REGISTER_LAST_SERVED11)
	])
{
	check_secondary_industry_closure();
}


////////////////////////////////////////////////////////////////////////////////
// build the industry window text here
////////////////////////////////////////////////////////////////////////////////
switch(FEAT_INDUSTRIES, SELF, aluminium_plant_switch_extra_text_electricity, 
	[
	 // the relevant information is stored in the permanent registers of the industry, which are updated in the production cycle
	 // now store the relevant values in the different registers
	 STORE_TEMP(city_get_power_available(), TEMP_REGISTER_POWER_AVAILABLE),
	 
	 STORE_TEMP(LOAD_PERM(PERM_REGISTER_PRODUCTION_AMOUNT), TEMP_REGISTER_EXTRA_TEXT_ARG0), 
	 STORE_TEMP(LOAD_PERM(PERM_REGISTER_PRODUCTION_PERCENTAGE), TEMP_REGISTER_EXTRA_TEXT_ARG1), 
	 STORE_TEMP(LOAD_PERM(PERM_REGISTER_POWER_DEMAND), TEMP_REGISTER_EXTRA_TEXT_ARG2),
	 
	 // if (power_available_from_city == 0) -> STR_INDUSTRY_NO_POWER
	 // else if (production_percentage == 100 && max_production > 0) -> STR_ENOUGH_POWER
	 // else -> STR_NOT_ENOUGH_POWER
	 STORE_TEMP((LOAD_PERM(PERM_REGISTER_PRODUCTION_PERCENTAGE) == 0 && LOAD_PERM(PERM_REGISTER_MAXIMUM_PRODUCTION_AMOUNT) > 0) ? string(STR_INDUSTRY_NO_POWER) :
	 ((LOAD_PERM(PERM_REGISTER_PRODUCTION_PERCENTAGE) == 100 && LOAD_PERM(PERM_REGISTER_MAXIMUM_PRODUCTION_AMOUNT) > 0) ? string(STR_INDUSTRY_ENOUGH_POWER) :
	 ((LOAD_PERM(PERM_REGISTER_MAXIMUM_PRODUCTION_AMOUNT) > 0) ? string(STR_INDUSTRY_NOT_ENOUGH_POWER) : string(STR_EMPTY)))
	 | string(STR_EMPTY) << 16, TEMP_REGISTER_EXTRA_TEXT_ARG3)
	])
{
	return string(STR_INDUSTRY_ELECTRICITY_TEXT);
}

switch(FEAT_INDUSTRIES, SELF, aluminium_plant_switch_extra_text, param_electricity_needed)
{
	1: aluminium_plant_switch_extra_text_electricity;
	return string(STR_EMPTY);
}

switch(FEAT_INDUSTRIES, SELF, aluminium_plant_switch_extra_text_fund, 
	[STORE_TEMP(string(STR_1900), TEMP_REGISTER_EXTRA_TEXT_ARG0),
	current_year]) {
	1900..500000: return string(STR_EMPTY);
	return string(STR_INDUSTRY_NOT_AVAILABLE_BEFORE);
}

// year < 1900: no creation, 1900 <= year: certain probability
switch(FEAT_INDUSTRIES, SELF, aluminium_plant_switch_check_availability, 
	current_year) {
	0..1899: return CB_RESULT_IND_NO_CONSTRUCTION;
	return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

switch(FEAT_INDUSTRIES, SELF, aluminium_plant_switch_cargo_subtype, getbits(extra_callback_info2, 16, 8)) {
	AORE: switch_cargo_subtype;
	return 0x3800 + string(STR_EMPTY);
}

switch(FEAT_INDUSTRIES, SELF, aluminium_plant_switch_cargo_subtype_basic_anorganic_chemistry, getbits(extra_callback_info2, 16, 8)) {
	AORE: switch_cargo_subtype;
	LYE_: switch_cargo_subtype;
	return 0x3800 + string(STR_EMPTY);
}

if (param_extension_aluminium) {
	if (!param_extension_basic_anorganic_chemistry) {
		item(FEAT_INDUSTRIES, aluminium_plant, INDUSTRY_ID_ALUMINIUM_PLANT) {
			property {
				substitute: 0;
				map_colour: 9;
				life_type: IND_LIFE_TYPE_PROCESSING;
				min_cargo_distr: 1;
				layouts: [aluminium_plant_tilelayout_1, aluminium_plant_tilelayout_2, aluminium_plant_tilelayout_3];
				spec_flags: bitmask(IND_FLAG_LONG_CARGO_TYPE_LISTS);
				conflicting_ind_types: [];
				random_sound_effects: [];
				name: string(STR_IND_ALUMINIUM_PLANT);
				prob_map_gen: 5;
				prob_in_game: 3;
				fund_cost_multiplier: 200;
				remove_cost_multiplier: 0;
				remove_cost_multiplier: 0;
				cargo_types: [accept_cargo("AORE"),produce_cargo("ALUM",0)];
				nearby_station_name: string(STR_STATION, string(STR_TOWN),string(STR_STATION_ALUMINIUM_PLANT));
			}
				
			graphics {
				construction_probability: aluminium_plant_switch_check_availability;
				produce_cargo_arrival:    empty_produce; 
				produce_256_ticks:        aluminium_plant_switch_produce;
				monthly_prod_change:      aluminium_plant_switch_update_last_served_date;
				random_prod_change:       return CB_RESULT_IND_PROD_NO_CHANGE;
				location_check:           aluminium_plant_switch_location_check_industry_distance;
				extra_text_fund:          aluminium_plant_switch_extra_text_fund;
				extra_text_industry:      aluminium_plant_switch_extra_text;
				cargo_subtype_display:    aluminium_plant_switch_cargo_subtype;
				build_prod_change:        initialize_last_served_date;
			}
		}
	}
	if (param_extension_basic_anorganic_chemistry) {
		item(FEAT_INDUSTRIES, aluminium_plant, INDUSTRY_ID_ALUMINIUM_PLANT) {
			property {
				substitute: 0;
				map_colour: 9;
				life_type: IND_LIFE_TYPE_PROCESSING;
				min_cargo_distr: 1;
				layouts: [aluminium_plant_tilelayout_1, aluminium_plant_tilelayout_2, aluminium_plant_tilelayout_3];
				spec_flags: bitmask(IND_FLAG_LONG_CARGO_TYPE_LISTS);
				conflicting_ind_types: [];
				random_sound_effects: [];
				name: string(STR_IND_ALUMINIUM_PLANT);
				prob_map_gen: 5;
				prob_in_game: 3;
				fund_cost_multiplier: 200;
				remove_cost_multiplier: 0;
				remove_cost_multiplier: 0;
				cargo_types: [accept_cargo("AORE"),accept_cargo("LYE_"),produce_cargo("ALUM",0)];
				nearby_station_name: string(STR_STATION, string(STR_TOWN),string(STR_STATION_ALUMINIUM_PLANT));
			}
				
			graphics {
				construction_probability: aluminium_plant_switch_check_availability;
				produce_cargo_arrival:    empty_produce; 
				produce_256_ticks:        aluminium_plant_switch_produce_basic_anorganic_chemistry;
				monthly_prod_change:      aluminium_plant_switch_update_last_served_date_basic_anorganic_chemistry;
				random_prod_change:       return CB_RESULT_IND_PROD_NO_CHANGE;
				location_check:           aluminium_plant_switch_location_check_industry_distance;
				extra_text_fund:          aluminium_plant_switch_extra_text_fund;
				extra_text_industry:      aluminium_plant_switch_extra_text;
				cargo_subtype_display:    aluminium_plant_switch_cargo_subtype_basic_anorganic_chemistry;
				build_prod_change:        initialize_last_served_date;
			}
		}
	}
}
