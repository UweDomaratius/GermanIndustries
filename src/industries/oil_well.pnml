spriteset(oil_wells_shed) {
    [10, 10, 64, 38, -31, -9, ANIM | NOCROP, "graphics/industries/oil_wells.png"]
}
spriteset(oil_wells_shed_snow) {
    [10, 10, 64, 38, -31, -9, ANIM | NOCROP, "graphics/industries/oil_wells_snow.png"]
}

spritelayout oil_wells_spritelayout_pump {
	childsprite {
		sprite: TTD_OIL_WELL_GROUND;
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		hide_sprite: (LOAD_TEMP(13));
		always_draw: 1;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_OIL_WELL_PUMP + (((animation_frame % 11) < 6) ? (animation_frame % 11) : 10 - (animation_frame % 11));
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 1;
		yoffset: 2;
		zoffset: 0;
		xextent: 15;
		yextent: 14;
		zextent: 16;
		always_draw: 0;
		hide_sprite: 0;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}
spritelayout oil_wells_spritelayout_building {
	childsprite {
		sprite: TTD_GROUND_SPRITE_MUD_TRACK;
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		hide_sprite: 0;
		always_draw: 1;
	}            
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NE) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_NW) == 0);
		xoffset:  0;
		yoffset:  0;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: oil_wells_shed(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 1;
		yoffset: 2;
		zoffset: 0;
		xextent: 15;
		yextent: 14;
		zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE));
	}
	building {
		sprite: oil_wells_shed_snow(0);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		xoffset: 1;
		yoffset: 2;
		zoffset: 0;
		xextent: 15;
		yextent: 14;
		zextent: 32;
		always_draw: 0;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_HIDE_TILE_SNOW));
	}
	building {
		sprite: TTD_FENCE_X;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SE) == 0);
		xoffset: 0;
		yoffset:  16;
		zoffset:  0;
		xextent: 16;
		yextent: 1;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
	building {
		sprite: TTD_FENCE_Y;
		hide_sprite: (LOAD_TEMP(TEMP_REGISTER_FENCE_SW) == 0);
		xoffset: 16;
		yoffset:  0;
		zoffset:  0;
		xextent: 1;
		yextent: 16;
		zextent: 6;
		recolour_mode: RECOLOUR_REMAP;
		palette:       PALETTE_USE_DEFAULT;
	}
}

//////////////////////////////////////////////////////////////////////////////
// graphics choice switch chain
//////////////////////////////////////////////////////////////////////////////

switch(FEAT_INDUSTRYTILES, SELF, oil_well_switch_graphics_layout_1, relative_pos) {
	relative_coord(0, 0): oil_wells_spritelayout_pump;
    relative_coord(0, 7): oil_wells_spritelayout_pump;
    relative_coord(1, 4): oil_wells_spritelayout_pump;
    relative_coord(2, 1): oil_wells_spritelayout_pump;
    relative_coord(3, 5): oil_wells_spritelayout_building;
    relative_coord(4, 8): oil_wells_spritelayout_pump;
    relative_coord(5, 1): oil_wells_spritelayout_pump;
    relative_coord(5, 4): oil_wells_spritelayout_pump;
	return 0; // a default is needed, but should never be reached, layout definitions are explicit
}
switch(FEAT_INDUSTRYTILES, SELF, oil_well_switch_graphics_layout_2, relative_pos) {
	relative_coord(0, 0): oil_wells_spritelayout_pump;
    relative_coord(0, 4): oil_wells_spritelayout_pump;
    relative_coord(1, 4): oil_wells_spritelayout_pump;
    relative_coord(2, 8): oil_wells_spritelayout_pump;
    relative_coord(4, 4): oil_wells_spritelayout_building;
    relative_coord(4, 8): oil_wells_spritelayout_pump;
    relative_coord(5, 2): oil_wells_spritelayout_pump;
    relative_coord(6, 2): oil_wells_spritelayout_pump;
    relative_coord(6, 4): oil_wells_spritelayout_pump;
	return 0; // a default is needed, but should never be reached, layout definitions are explicit
}
switch(FEAT_INDUSTRYTILES, SELF, oil_well_switch_graphics_layout_3, relative_pos) {
	relative_coord(0, 0): oil_wells_spritelayout_pump;
    relative_coord(0, 2): oil_wells_spritelayout_pump;
    relative_coord(1, 4): oil_wells_spritelayout_pump;
    relative_coord(1, 6): oil_wells_spritelayout_pump;
    relative_coord(2, 0): oil_wells_spritelayout_building;
    relative_coord(3, 2): oil_wells_spritelayout_pump;
    relative_coord(3, 4): oil_wells_spritelayout_pump;
	return 0; // a default is needed, but should never be reached, layout definitions are explicit
}
switch(FEAT_INDUSTRYTILES, SELF, oil_well_switch_graphics_layout_4, relative_pos) {
	relative_coord(0, 0): oil_wells_spritelayout_pump;
    relative_coord(0, 4): oil_wells_spritelayout_pump;
    relative_coord(0, 6): oil_wells_spritelayout_pump;
    relative_coord(1, 2): oil_wells_spritelayout_pump;
    relative_coord(1, 8): oil_wells_spritelayout_building;
    relative_coord(2, 0): oil_wells_spritelayout_pump;
    relative_coord(2, 2): oil_wells_spritelayout_pump;
    relative_coord(3, 1): oil_wells_spritelayout_pump;
    relative_coord(5, 0): oil_wells_spritelayout_pump;
    relative_coord(5, 2): oil_wells_spritelayout_pump;
    relative_coord(6, 0): oil_wells_spritelayout_pump;
	return 0; // a default is needed, but should never be reached, layout definitions are explicit
}

switch(FEAT_INDUSTRYTILES, PARENT, oil_well_switch_graphics_layouts, layout_num) {
	1: oil_well_switch_graphics_layout_1;
	2: oil_well_switch_graphics_layout_2;
	3: oil_well_switch_graphics_layout_3;
	4: oil_well_switch_graphics_layout_4;
    oil_well_switch_graphics_layout_1; // default
}

switch(FEAT_INDUSTRYTILES, SELF, oil_well_switch_graphics_construction_state, construction_state) {
    0..2: spritelayout_default_construction_states;
    oil_well_switch_graphics_layouts; // default
}

switch (FEAT_INDUSTRYTILES, SELF, oil_well_switch_graphics, [switch_tile_fences(),switch_graphics_init_temp_registers()]) {
    oil_well_switch_graphics_construction_state;
}

//////////////////////////////////////////////////////////////////////////////
// location checks
//////////////////////////////////////////////////////////////////////////////
// This check works as follows: calculate height of the northernmost tile of the industry and add 0, 1 or 2 for flat, slope. steep slope
// Do the same for the current tile and compare the results. If the result is equal, the terrain is effectively flat
// and industry can be placed.
// It just looks weird due to the stacked ternary operators needed here
switch (FEAT_INDUSTRYTILES, SELF, oil_well_switch_tile_location_check2,
			(nearby_tile_height(-relative_x, -relative_y) + 
			(nearby_tile_slope(-relative_x, -relative_y)== SLOPE_FLAT ? 0 : nearby_tile_slope(-relative_x, -relative_y) == bitmask(IS_STEEP_SLOPE) ? 2 : 1)) 
			== 
			(nearby_tile_height(0, 0) + (nearby_tile_slope(0, 0) == SLOPE_FLAT ? 0 : nearby_tile_slope(0, 0) == bitmask(IS_STEEP_SLOPE) ? 2 : 1))
			) {
	1: return CB_RESULT_LOCATION_ALLOW;
	return CB_RESULT_LOCATION_DISALLOW;
}

switch (FEAT_INDUSTRYTILES, SELF, oil_well_switch_tile_location_check,
	is_funded_or_prospected() || (generation_not_forbidden_by_param() && not_next_to_industry() && not_next_to_buildings()))
{
	1: oil_well_switch_tile_location_check2;
	return CB_RESULT_LOCATION_DISALLOW;
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_industry_stop_anim, animation_frame) {
	1: return 11; // jump to the 'stop animation cycle' when triggered and currently animated
	2: return 12;
	3: return 13;
	4: return 14;
	5: return 15;
	6: return 16;
	7: return 17;
	8: return 18;
	9: return 19;
	10: return 20;
	return CB_RESULT_DO_NOTHING;
}
switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_industry_start_anim, animation_frame) {
	11: return 1;
	12: return 2;
	13: return 3;
	14: return 4;
	15: return 5;
	16: return 6;
	17: return 7;
	18: return 8;
	19: return 9;
	20: return 10;
	return CB_RESULT_START_ANIMATION;
}
random_switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_industry_anim_control, bitmask(TRIGGER_INDUSTRYTILE_TILELOOP)) {
	1: return oil_wells_tile_1_industry_stop_anim;
	1: return oil_wells_tile_1_industry_start_anim;
}
switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_anim_next_frame, animation_frame) {
	10: return 1;
	11: return CB_RESULT_STOP_ANIMATION; // Don't actually stop animation, just keep looping the same frame over and over.
	20: return 11;
	return CB_RESULT_NEXT_FRAME;
}
	
//////////////////////////////////////////////////////////////////////////////
// industry tile and layout definition
//////////////////////////////////////////////////////////////////////////////
item(FEAT_INDUSTRYTILES, oil_well_tile_animated, INDUSTRY_TILE_ID_OIL_WELL_ANIM) {
	property {
		substitute:         0;
		land_shape_flags:   0;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL,INDTILE_FLAG_RANDOM_ANIMATION);
		animation_info: [ANIMATION_LOOPING, 20];
        animation_speed: 3;
        animation_triggers: bitmask(ANIM_TRIGGER_INDTILE_TILE_LOOP);
	}
	graphics {
		tile_check: oil_well_switch_tile_location_check;
		anim_next_frame: return oil_wells_tile_1_anim_next_frame;
        anim_control: oil_wells_tile_1_industry_anim_control;
        random_trigger: oil_wells_tile_1_industry_anim_control;
		oil_well_switch_graphics;
	}
}

item(FEAT_INDUSTRYTILES, oil_well_tile_non_animated, INDUSTRY_TILE_ID_OIL_WELL) {
	property {
		substitute:         0;
		land_shape_flags:   0;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
		animation_triggers: bitmask();
	}
	graphics {
		tile_check: oil_well_switch_tile_location_check;
		oil_well_switch_graphics;
	}
}

tilelayout oil_well_industry_layout_1_tilelayout {
	0, 0: oil_well_tile_animated;
	0, 7: oil_well_tile_animated;
	1, 4: oil_well_tile_animated;
	2, 1: oil_well_tile_animated;
	3, 5: oil_well_tile_non_animated;
	4, 8: oil_well_tile_animated;
	5, 1: oil_well_tile_animated;
	5, 4: oil_well_tile_animated;
}
tilelayout oil_well_industry_layout_2_tilelayout {
	0, 0: oil_well_tile_animated;
	0, 4: oil_well_tile_animated;
	1, 4: oil_well_tile_animated;
	2, 8: oil_well_tile_animated;
	4, 4: oil_well_tile_non_animated;
	4, 8: oil_well_tile_animated;
	5, 2: oil_well_tile_animated;
	6, 2: oil_well_tile_animated;
	6, 4: oil_well_tile_animated;
}
tilelayout oil_well_industry_layout_3_tilelayout {
	0, 0: oil_well_tile_animated;
	0, 2: oil_well_tile_animated;
	1, 4: oil_well_tile_animated;
	1, 6: oil_well_tile_animated;
	2, 0: oil_well_tile_non_animated;
	3, 2: oil_well_tile_animated;
	3, 4: oil_well_tile_animated;
}
tilelayout oil_well_industry_layout_4_tilelayout {
	0, 0: oil_well_tile_animated;
	0, 4: oil_well_tile_animated;
	0, 6: oil_well_tile_animated;
	1, 2: oil_well_tile_animated;
	1, 8: oil_well_tile_non_animated;
	2, 0: oil_well_tile_animated;
	2, 2: oil_well_tile_animated;
	3, 1: oil_well_tile_animated;
	5, 0: oil_well_tile_animated;
	5, 2: oil_well_tile_animated;
	6, 0: oil_well_tile_animated;
}

switch(FEAT_INDUSTRIES, SELF, oil_well_switch_location_check_industry_distance,
        (water_distance > 16) &&
		(industry_distance(INDUSTRY_ID_OIL_WELL) >= 16) && 
	    (industry_distance(INDUSTRY_ID_POWER_PLANT) >= 32) &&
		(industry_distance(INDUSTRY_ID_PLASTICS_PLANT) >= 32)) 
{ 
	1: return CB_RESULT_LOCATION_ALLOW;
	return CB_RESULT_LOCATION_DISALLOW;
}

switch(FEAT_INDUSTRIES, SELF, oil_well_func_calc_max_prod, 
	param_economy_model == 0 ? 128 :
	  current_year <= 1859 ? 4 : 
	  current_year <= 1969 ? max(4,(3*(current_year-1860)/2)+4) : 
	  max(4,128-(current_year-1970))) {
	return;
}

// if nothing has been transported at all, do not change production (industry might just not be serviced)
switch(FEAT_INDUSTRIES, SELF, oil_well_switch_prod_change, 
	[STORE_TEMP(production_level, TEMP_REGISTER_CURRENT_PRODUCTION_LEVEL),
	 STORE_TEMP(transported_last_month_pct("OIL_"), TEMP_REGISTER_TRANSPORTED_LAST_MONTH_PCT_CARGO0),
	 STORE_TEMP(oil_well_func_calc_max_prod(),TEMP_REGISTER_MAXIMUM_PRIMARY_PRODUCTION),
	 LOAD_PERM(PERM_REGISTER_RESOURCES) != 0])
{
	1: change_production; // use default rules to adapt production
	return CB_RESULT_IND_PROD_CLOSE; // resources are depleted - close
}

// randomize production at build time based on random bits: 96t min, 152t max
switch(FEAT_INDUSTRIES, SELF, oil_well_switch_prod_change_build,
	[initialize_extractive_resources(),
	 STORE_TEMP(oil_well_func_calc_max_prod(),TEMP_REGISTER_MAXIMUM_PRIMARY_PRODUCTION)
	])
{
	randomize_initial_production;
}


produce(oil_well_produce,
	[],
	[OIL_: LOAD_TEMP(TEMP_REGISTER_PRODUCTION_AMOUNT);],
	0 // do not run again
)

////////////////////////////////////////////////////////////////////////////////
// calculate how much to produce, based on remaining reserves, current production level etc.
////////////////////////////////////////////////////////////////////////////////
switch(FEAT_INDUSTRIES, SELF, oil_well_switch_produce, init_primary_production()) {
	oil_well_produce;
}

////////////////////////////////////////////////////////////////////////////////
// build the industry window text here
////////////////////////////////////////////////////////////////////////////////
switch(FEAT_INDUSTRIES, SELF, oil_well_switch_extra_text, 
	[STORE_TEMP(oil_well_func_calc_max_prod(),TEMP_REGISTER_MAXIMUM_PRIMARY_PRODUCTION),
	 STORE_TEMP(param_primary_production == 0 ? 100 : param_primary_production, TEMP_REGISTER_PARAM_PRODUCTION_SCALE),
	 STORE_TEMP(production_level * LOAD_TEMP(TEMP_REGISTER_PARAM_PRODUCTION_SCALE) / 100, TEMP_REGISTER_PRODUCTION_AMOUNT),
	 STORE_TEMP(production_level, TEMP_REGISTER_CURRENT_PRODUCTION_LEVEL),
	 STORE_TEMP(
		LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_LEVEL) < LOAD_TEMP(TEMP_REGISTER_MAXIMUM_PRIMARY_PRODUCTION) ? string(STR_INDUSTRY_PREREQ_INCREASE_PRODUCTION) : string(STR_INDUSTRY_PREREQ_KEEP_PRODUCTION) | 
		string(STR_EMPTY) << 16,
		TEMP_REGISTER_EXTRA_TEXT_ARG0),
	 STORE_TEMP(LOAD_PERM(PERM_REGISTER_RESOURCES) / 1000,TEMP_REGISTER_EXTRA_TEXT_ARG1),
	 STORE_TEMP(LOAD_PERM(PERM_REGISTER_RESOURCES) / (LOAD_TEMP(TEMP_REGISTER_PRODUCTION_AMOUNT)*8*12),TEMP_REGISTER_EXTRA_TEXT_ARG2)
	]) {
	return string(STR_EXTRACTIVE_INDUSTRY_TEXT);
}

switch(FEAT_INDUSTRIES, SELF, oil_well_switch_extra_text_fund, 
    [STORE_TEMP(string(STR_1860) | string(STR_1985) << 16, TEMP_REGISTER_EXTRA_TEXT_ARG0),
	current_year]) {
	1860..1985: return string(STR_EMPTY);
	return string(STR_INDUSTRY_AVAILABLE_TIMEFRAME);
}

// check creation type (getbits(extra_callback_info2, 0, 8))
switch(FEAT_INDUSTRIES, SELF, oil_well_switch_check_availability_map_gen, 
	getbits(extra_callback_info2, 0, 8) == IND_CREATION_GENERATION) {
	1: return CB_RESULT_IND_NO_CONSTRUCTION;
	return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

// year < 1860: no creation, 1860 <= year < 1950: certain probability, 1985 <= year: no creation (use oil rigs)
switch(FEAT_INDUSTRIES, SELF, oil_well_switch_check_availability, 
	current_year) {
	0..1859: return CB_RESULT_IND_NO_CONSTRUCTION;              // no coal mines before 1860
	1985..5000000: oil_well_switch_check_availability_map_gen;  // check mode, if the map is generated with that starting year, coal mines should exist
	return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

item(FEAT_INDUSTRIES, oil_well, INDUSTRY_ID_OIL_WELL) {
	property {
		substitute: 0;
		map_colour: 152;
		life_type: IND_LIFE_TYPE_EXTRACTIVE;
		min_cargo_distr: 1;
		layouts: [oil_well_industry_layout_1_tilelayout,oil_well_industry_layout_2_tilelayout,oil_well_industry_layout_3_tilelayout,oil_well_industry_layout_4_tilelayout];
		spec_flags: bitmask(IND_FLAG_LONG_CARGO_TYPE_LISTS);
		conflicting_ind_types: [];
		random_sound_effects: [];
		name: TTD_STR_INDUSTRY_NAME_OIL_WELLS;
		prob_map_gen: 4;
		prob_in_game: 4;
		prospect_chance: 0.75;
		fund_cost_multiplier: 8;
		remove_cost_multiplier: 0;
		remove_cost_multiplier: 0;
		cargo_types: [produce_cargo("OIL_",0)];
		nearby_station_name: string(STR_STATION, string(STR_TOWN),string(STR_STATION_OIL_WELL));
	}

	graphics {
		construction_probability: oil_well_switch_check_availability;
		produce_cargo_arrival:    empty_produce; 
		produce_256_ticks:        oil_well_switch_produce;
		monthly_prod_change:      oil_well_switch_prod_change;
		random_prod_change:       oil_well_switch_prod_change;
		build_prod_change:        oil_well_switch_prod_change_build;
		location_check:           oil_well_switch_location_check_industry_distance;
		extra_text_fund:          oil_well_switch_extra_text_fund;
		extra_text_industry:      oil_well_switch_extra_text;
		//cargo_subtype_display:    oil_well_switch_cargo_subtype;
	}
}
    