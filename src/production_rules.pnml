////////////////////////////////////////////////////////////////////////////////
// Placeholder produce rule that does not consume or produce anything
////////////////////////////////////////////////////////////////////////////////
produce(empty_produce, [], [])

////////////////////////////////////////////////////////////////////////////////
// if < 30% of produced goods were transported, decrease production by 5
// if < 40% of produced goods were transported, decrease production by 1
// if > 60% of produced goods were transported, increase production by 1
// if > 75% of produced goods were transported, increase production by 5
// Precondition: Temp storage registers hold the current production level and
// the maximum possible production.
// Result is written into temporary storage register 0x100 and returned as 
// CB result.
// The result is always >=4 (to prevent the industry from closing).
// The result is always <= maximum production level (which may be statically or 
// dynamically computed)
////////////////////////////////////////////////////////////////////////////////
switch(FEAT_INDUSTRIES, SELF, set_new_production, 
	[ LOAD_TEMP(TEMP_REGISTER_TRANSPORTED_LAST_MONTH_PCT_CARGO0) < 30 ? STORE_TEMP(max(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_LEVEL) - 5,4) << 16, TEMP_REGISTER_CB_RESULT_IND_PROD_SET_BY_0x100) : 
	  LOAD_TEMP(TEMP_REGISTER_TRANSPORTED_LAST_MONTH_PCT_CARGO0) < 40 ? STORE_TEMP(max(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_LEVEL) - 1,4) << 16, TEMP_REGISTER_CB_RESULT_IND_PROD_SET_BY_0x100) : 
	  LOAD_TEMP(TEMP_REGISTER_TRANSPORTED_LAST_MONTH_PCT_CARGO0) < 75 ? STORE_TEMP(min(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_LEVEL)+1,LOAD_TEMP(TEMP_REGISTER_MAXIMUM_PRIMARY_PRODUCTION)) << 16, TEMP_REGISTER_CB_RESULT_IND_PROD_SET_BY_0x100) : 
	  STORE_TEMP(min(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_LEVEL)+5,LOAD_TEMP(TEMP_REGISTER_MAXIMUM_PRIMARY_PRODUCTION)) << 16, TEMP_REGISTER_CB_RESULT_IND_PROD_SET_BY_0x100)
	]) {
	return CB_RESULT_IND_PROD_SET_BY_0x100;
}

switch(FEAT_INDUSTRIES, SELF, change_production,
	[(LOAD_TEMP(TEMP_REGISTER_TRANSPORTED_LAST_MONTH_PCT_CARGO0) != 0 && 
	((LOAD_TEMP(TEMP_REGISTER_TRANSPORTED_LAST_MONTH_PCT_CARGO0) < 40) || LOAD_TEMP(TEMP_REGISTER_TRANSPORTED_LAST_MONTH_PCT_CARGO0) > 59))])
{
	1: set_new_production;
	return CB_RESULT_IND_PROD_NO_CHANGE;
}

////////////////////////////////////////////////////////////////////////////////
// Randomize initial production value for newly generated industries.
// monthly production: 96t min, 152t max (with default production scaling)
// Precondition: Temp storage register holds the maximum possible production.
// Returns the production value in game units (12-19).
// Value is <= maximum production value, which may also be lower than 12.
////////////////////////////////////////////////////////////////////////////////
switch(FEAT_INDUSTRIES, SELF, randomize_initial_production, extra_callback_info2)
{
	return min(12+getbits(extra_callback_info2, 0, 3),LOAD_TEMP(TEMP_REGISTER_MAXIMUM_PRIMARY_PRODUCTION));
}

////////////////////////////////////////////////////////////////////////////////
// Extractive industries have resources which can be depleted. They are
// initialized upon construction of the industry and updated with every produce
// command. If the resources are depleted, the industry closes.
// Stores a value between 750000 and 2500000. TODO: adapt after playtesting
////////////////////////////////////////////////////////////////////////////////
switch(FEAT_INDUSTRIES, SELF, initialize_extractive_resources,
	[
	STORE_PERM(250000 + getbits(extra_callback_info2, 3, 3)*250000,PERM_REGISTER_RESOURCES)
	]
)
{
	return;
}

////////////////////////////////////////////////////////////////////////////////
// Initialize temporary registers for the actual produce calls of primary industries
////////////////////////////////////////////////////////////////////////////////
switch(FEAT_INDUSTRIES, SELF, init_primary_production,
[	// load the GRF parameter for production scaling percentage and ensure it's not 0
	STORE_TEMP(param_primary_production == 0 ? 100 : param_primary_production, TEMP_REGISTER_PARAM_PRODUCTION_SCALE),
	 // store the theoretical amount of production (production level * scaling percentage)
	 STORE_TEMP(production_level * LOAD_TEMP(TEMP_REGISTER_PARAM_PRODUCTION_SCALE) / 100, TEMP_REGISTER_PRODUCTION_AMOUNT),
	 // reduce production amount if remaining resources are less than what should be produced
	 STORE_TEMP(min(LOAD_PERM(PERM_REGISTER_RESOURCES),LOAD_TEMP(TEMP_REGISTER_PRODUCTION_AMOUNT)),TEMP_REGISTER_PRODUCTION_AMOUNT),
	 // update the value for remaining resources
	 STORE_PERM(LOAD_PERM(PERM_REGISTER_RESOURCES) - LOAD_TEMP(TEMP_REGISTER_PRODUCTION_AMOUNT),PERM_REGISTER_RESOURCES)])
{ return; }

////////////////////////////////////////////////////////////////////////////////
// Calculate the total production as sum of 10% of each incoming waiting cargo
// Relevant for industries that work as soon as 1 incoming cargo is available
// Requires TEMP_REGISTER_PRODUCTION_RAWx to be set - call 
// calculate_raw_material_usage() before
////////////////////////////////////////////////////////////////////////////////
switch(FEAT_INDUSTRIES, SELF, calculate_total_production,
	[STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW0), TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT),
	 STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW1) + LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT), TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT),
	 STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW2) + LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT), TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT),
	 STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW3) + LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT), TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT),
	 STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW4) + LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT), TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT),
	 STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW5) + LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT), TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT)
]
)
{
}

////////////////////////////////////////////////////////////////////////////////
// Calculate the number of waiting cargos for an industry
// Precondition: Have the values stored in TEMP_REGISTER_INCOMING_CARGO_WAITINGx
////////////////////////////////////////////////////////////////////////////////
switch(FEAT_INDUSTRIES, SELF, calculate_number_of_waiting_cargos,
	[STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING0) > 0 ? 1 : 0, TEMP_REGISTER_NUMBER_OF_WAITING_CARGOS),
	 STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING1) > 0 ? 1 + LOAD_TEMP(TEMP_REGISTER_NUMBER_OF_WAITING_CARGOS) : LOAD_TEMP(TEMP_REGISTER_NUMBER_OF_WAITING_CARGOS), TEMP_REGISTER_NUMBER_OF_WAITING_CARGOS),
	 STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING2) > 0 ? 1 + LOAD_TEMP(TEMP_REGISTER_NUMBER_OF_WAITING_CARGOS) : LOAD_TEMP(TEMP_REGISTER_NUMBER_OF_WAITING_CARGOS), TEMP_REGISTER_NUMBER_OF_WAITING_CARGOS),
	 STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING3) > 0 ? 1 + LOAD_TEMP(TEMP_REGISTER_NUMBER_OF_WAITING_CARGOS) : LOAD_TEMP(TEMP_REGISTER_NUMBER_OF_WAITING_CARGOS), TEMP_REGISTER_NUMBER_OF_WAITING_CARGOS),
	 STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING4) > 0 ? 1 + LOAD_TEMP(TEMP_REGISTER_NUMBER_OF_WAITING_CARGOS) : LOAD_TEMP(TEMP_REGISTER_NUMBER_OF_WAITING_CARGOS), TEMP_REGISTER_NUMBER_OF_WAITING_CARGOS),
	 STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING5) > 0 ? 1 + LOAD_TEMP(TEMP_REGISTER_NUMBER_OF_WAITING_CARGOS) : LOAD_TEMP(TEMP_REGISTER_NUMBER_OF_WAITING_CARGOS), TEMP_REGISTER_NUMBER_OF_WAITING_CARGOS)
	]
)
{
}

////////////////////////////////////////////////////////////////////////////////
// Calculate the usage of raw materials based on 10% of the available inputs
////////////////////////////////////////////////////////////////////////////////
switch(FEAT_INDUSTRIES, SELF, calculate_raw_material_usage,
	[STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING0) > 0 ? max(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING0)*10/100,1) : 0, TEMP_REGISTER_PRODUCTION_RAW0),
	 STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING1) > 0 ? max(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING1)*10/100,1) : 0, TEMP_REGISTER_PRODUCTION_RAW1),
	 STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING2) > 0 ? max(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING2)*10/100,1) : 0, TEMP_REGISTER_PRODUCTION_RAW2),
	 STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING3) > 0 ? max(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING3)*10/100,1) : 0, TEMP_REGISTER_PRODUCTION_RAW3),
	 STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING4) > 0 ? max(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING4)*10/100,1) : 0, TEMP_REGISTER_PRODUCTION_RAW4),
	 STORE_TEMP(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING5) > 0 ? max(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING5)*10/100,1) : 0, TEMP_REGISTER_PRODUCTION_RAW5),
	]
)
{
}

switch(FEAT_INDUSTRIES, SELF, initialize_last_served_date,
	[STORE_PERM(1, PERM_REGISTER_LAST_SERVED00),
	 STORE_PERM(1, PERM_REGISTER_LAST_SERVED01),
	 STORE_PERM(1, PERM_REGISTER_LAST_SERVED02),
	 STORE_PERM(1, PERM_REGISTER_LAST_SERVED03),
	 STORE_PERM(1, PERM_REGISTER_LAST_SERVED04),
	 STORE_PERM(1, PERM_REGISTER_LAST_SERVED05),
	 STORE_PERM(1, PERM_REGISTER_LAST_SERVED06),
	 STORE_PERM(1, PERM_REGISTER_LAST_SERVED07),
	 STORE_PERM(1, PERM_REGISTER_LAST_SERVED08),
	 STORE_PERM(1, PERM_REGISTER_LAST_SERVED09),
	 STORE_PERM(1, PERM_REGISTER_LAST_SERVED10),
	 STORE_PERM(1, PERM_REGISTER_LAST_SERVED11)
	])
{
}

switch(FEAT_INDUSTRIES, SELF, update_last_served_date, 
	[STORE_PERM(LOAD_PERM(PERM_REGISTER_LAST_SERVED01), PERM_REGISTER_LAST_SERVED00),
	 STORE_PERM(LOAD_PERM(PERM_REGISTER_LAST_SERVED02), PERM_REGISTER_LAST_SERVED01),
	 STORE_PERM(LOAD_PERM(PERM_REGISTER_LAST_SERVED03), PERM_REGISTER_LAST_SERVED02),
	 STORE_PERM(LOAD_PERM(PERM_REGISTER_LAST_SERVED04), PERM_REGISTER_LAST_SERVED03),
	 STORE_PERM(LOAD_PERM(PERM_REGISTER_LAST_SERVED05), PERM_REGISTER_LAST_SERVED04),
	 STORE_PERM(LOAD_PERM(PERM_REGISTER_LAST_SERVED06), PERM_REGISTER_LAST_SERVED05),
	 STORE_PERM(LOAD_PERM(PERM_REGISTER_LAST_SERVED07), PERM_REGISTER_LAST_SERVED06),
	 STORE_PERM(LOAD_PERM(PERM_REGISTER_LAST_SERVED08), PERM_REGISTER_LAST_SERVED07),
	 STORE_PERM(LOAD_PERM(PERM_REGISTER_LAST_SERVED09), PERM_REGISTER_LAST_SERVED08),
	 STORE_PERM(LOAD_PERM(PERM_REGISTER_LAST_SERVED10), PERM_REGISTER_LAST_SERVED09),
	 STORE_PERM(LOAD_PERM(PERM_REGISTER_LAST_SERVED11), PERM_REGISTER_LAST_SERVED10)
	])
{
}

random_switch(FEAT_INDUSTRIES, SELF, random_chance_to_close_industry)
{
	49: return CB_RESULT_IND_PROD_NO_CHANGE;
	1: return CB_RESULT_IND_PROD_CLOSE;
}

switch(FEAT_INDUSTRIES, SELF, check_secondary_industry_closure,
	[STORE_TEMP(LOAD_PERM(PERM_REGISTER_LAST_SERVED00) != 0, TEMP_REGISTER_PRODUCTION_LAST_YEAR),
	 STORE_TEMP(LOAD_PERM(PERM_REGISTER_LAST_SERVED01) != 0 || LOAD_TEMP(TEMP_REGISTER_PRODUCTION_LAST_YEAR), TEMP_REGISTER_PRODUCTION_LAST_YEAR),
	 STORE_TEMP(LOAD_PERM(PERM_REGISTER_LAST_SERVED02) != 0 || LOAD_TEMP(TEMP_REGISTER_PRODUCTION_LAST_YEAR), TEMP_REGISTER_PRODUCTION_LAST_YEAR),
	 STORE_TEMP(LOAD_PERM(PERM_REGISTER_LAST_SERVED03) != 0 || LOAD_TEMP(TEMP_REGISTER_PRODUCTION_LAST_YEAR), TEMP_REGISTER_PRODUCTION_LAST_YEAR),
	 STORE_TEMP(LOAD_PERM(PERM_REGISTER_LAST_SERVED04) != 0 || LOAD_TEMP(TEMP_REGISTER_PRODUCTION_LAST_YEAR), TEMP_REGISTER_PRODUCTION_LAST_YEAR),
	 STORE_TEMP(LOAD_PERM(PERM_REGISTER_LAST_SERVED05) != 0 || LOAD_TEMP(TEMP_REGISTER_PRODUCTION_LAST_YEAR), TEMP_REGISTER_PRODUCTION_LAST_YEAR),
	 STORE_TEMP(LOAD_PERM(PERM_REGISTER_LAST_SERVED06) != 0 || LOAD_TEMP(TEMP_REGISTER_PRODUCTION_LAST_YEAR), TEMP_REGISTER_PRODUCTION_LAST_YEAR),
	 STORE_TEMP(LOAD_PERM(PERM_REGISTER_LAST_SERVED07) != 0 || LOAD_TEMP(TEMP_REGISTER_PRODUCTION_LAST_YEAR), TEMP_REGISTER_PRODUCTION_LAST_YEAR),
	 STORE_TEMP(LOAD_PERM(PERM_REGISTER_LAST_SERVED08) != 0 || LOAD_TEMP(TEMP_REGISTER_PRODUCTION_LAST_YEAR), TEMP_REGISTER_PRODUCTION_LAST_YEAR),
	 STORE_TEMP(LOAD_PERM(PERM_REGISTER_LAST_SERVED09) != 0 || LOAD_TEMP(TEMP_REGISTER_PRODUCTION_LAST_YEAR), TEMP_REGISTER_PRODUCTION_LAST_YEAR),
	 STORE_TEMP(LOAD_PERM(PERM_REGISTER_LAST_SERVED10) != 0 || LOAD_TEMP(TEMP_REGISTER_PRODUCTION_LAST_YEAR), TEMP_REGISTER_PRODUCTION_LAST_YEAR),
	 STORE_TEMP(LOAD_PERM(PERM_REGISTER_LAST_SERVED11) != 0 || LOAD_TEMP(TEMP_REGISTER_PRODUCTION_LAST_YEAR), TEMP_REGISTER_PRODUCTION_LAST_YEAR),
	 LOAD_TEMP(TEMP_REGISTER_PRODUCTION_LAST_YEAR) || param_forbid_industry_closure
	])
{
	1: return CB_RESULT_IND_PROD_NO_CHANGE;
	random_chance_to_close_industry;
}

switch(FEAT_INDUSTRIES, SELF, store_debug_production_data,
	[STORE_PERM(LOAD_TEMP(TEMP_REGISTER_NUMBER_OF_WAITING_CARGOS), PERM_REGISTER_DBG_NUMBER_OF_WAITING_CARGOS),
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_CURRENT_PRODUCTION_AMOUNT), PERM_REGISTER_DBG_CURRENT_PRODUCTION_AMOUNT),
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_PARAM_PRODUCTION_SCALE), PERM_REGISTER_DBG_PRODUCTION_SCALE),
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING0), PERM_REGISTER_DBG_INCOMING_CARGO_WAITING0),
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING1), PERM_REGISTER_DBG_INCOMING_CARGO_WAITING1),
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING2), PERM_REGISTER_DBG_INCOMING_CARGO_WAITING2),
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING3), PERM_REGISTER_DBG_INCOMING_CARGO_WAITING3),
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING4), PERM_REGISTER_DBG_INCOMING_CARGO_WAITING4),
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_INCOMING_CARGO_WAITING5), PERM_REGISTER_DBG_INCOMING_CARGO_WAITING5),
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW0), PERM_REGISTER_DBG_PRODUCTION_RAW0),
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW1), PERM_REGISTER_DBG_PRODUCTION_RAW1),
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW2), PERM_REGISTER_DBG_PRODUCTION_RAW2),
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW3), PERM_REGISTER_DBG_PRODUCTION_RAW3),
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW4), PERM_REGISTER_DBG_PRODUCTION_RAW4),
	 STORE_PERM(LOAD_TEMP(TEMP_REGISTER_PRODUCTION_RAW5), PERM_REGISTER_DBG_PRODUCTION_RAW5)
	])
{
}